<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BSR&#39;s Notes</title>
  <subtitle>Linux, Container and related.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://buildship.run/"/>
  <updated>2016-10-11T02:15:11.000Z</updated>
  <id>http://buildship.run/</id>
  
  <author>
    <name>buildshiprun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>理解Docker容器网络 [译文]</title>
    <link href="http://buildship.run/2016/container-networking/"/>
    <id>http://buildship.run/2016/container-networking/</id>
    <published>2016-10-10T05:46:25.000Z</published>
    <updated>2016-10-11T02:15:11.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0   &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.docker.com/engine/userguide/networking/&lt;/a&gt;&lt;br&gt;由于能力所限，翻译难免有不到位的地方，另外官方文档也时有更新，如有不一致的地方，请以原文为准！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解Docker容器网络&quot;&gt;&lt;a href=&quot;#理解Docker容器网络&quot; class=&quot;headerlink&quot; title=&quot;理解Docker容器网络&quot;&gt;&lt;/a&gt;理解Docker容器网络&lt;/h2&gt;&lt;p&gt;本节概述了Docker引擎原生提供的默认网络特性，里面介绍了Docker默认创建的网络类型，以及如何创建用户定义的网络。此外还介绍了在单个主机或集群上创建网络所需的资源。&lt;/p&gt;
&lt;h2 id=&quot;默认网络&quot;&gt;&lt;a href=&quot;#默认网络&quot; class=&quot;headerlink&quot; title=&quot;默认网络&quot;&gt;&lt;/a&gt;默认网络&lt;/h2&gt;&lt;p&gt;Docker在安装时自动创建了三个网络。您可以通过运行&lt;code&gt;docker network ls&lt;/code&gt;命令列出这些网络：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network ls

NETWORK ID          NAME                DRIVER
7fca4eb8c647        bridge              bridge
9f904ee27bf5        none                null
cf03ee007fb4        host                host
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Docker历来的实现中包含了这三个网络类型。当您运行一个容器的时，您可以通过&lt;code&gt;--network&lt;/code&gt;标识来指定容器运行在哪个网络中。&lt;/p&gt;
&lt;p&gt;名称为&lt;code&gt;bridge&lt;/code&gt;的网络实际上就是Docker安装的&lt;code&gt;docker0&lt;/code&gt;网络，除非通过&lt;code&gt;docker run --network=&amp;lt;NETWORK&amp;gt;&lt;/code&gt;选项指定了网络，否则默认情况下Docker守护进程把容器都连接到这个网络。您可以通过在宿主机上运行&lt;code&gt;ifconfig&lt;/code&gt;命令来查看，可以看到这个&lt;code&gt;bridge&lt;/code&gt;网络是宿主机网络栈的一部分。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ ifconfig

docker0   Link encap:Ethernet  HWaddr 02:42:47:bc:3a:eb
          inet addr:172.17.0.1  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:47ff:febc:3aeb/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
          RX packets:17 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1100 (1.1 KB)  TX bytes:648 (648.0 B)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;名称为&lt;code&gt;none&lt;/code&gt;的网络把容器添加到一个容器特定的网络栈中，那个容器是没有网络接口的。连接到容器里您可以看容器本身的网络栈：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker attach nonenetcontainer

root@0cb243cd1293:/# cat /etc/hosts
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
root@0cb243cd1293:/# ifconfig
lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

root@0cb243cd1293:/#
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;您可以通过&lt;code&gt;CTRL-p CTRL-q&lt;/code&gt;组合按键从容器中退出并保持容器运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;名称为&lt;code&gt;host&lt;/code&gt;的网络把容器添加到宿主机的网络栈中，您可以在容器内部查看网络栈信息，您会发现和宿主机的信息是一模一样的。&lt;/p&gt;
&lt;p&gt;除了&lt;code&gt;bridge&lt;/code&gt;网络，您一般不需要与这些默认网络进行交互。您可以列出并检视这些网络，但不能删除它们，它们是Docker必须安装的。然而，您可以创建您自有的用户定义型的网络，当然您也可以在不需要的时候删除掉。在您了解更多有关创建自有网络之前，值得再深入看一下默认的&lt;code&gt;bridge&lt;/code&gt;网络。&lt;/p&gt;
&lt;h3 id=&quot;默认bridge网络的细节&quot;&gt;&lt;a href=&quot;#默认bridge网络的细节&quot; class=&quot;headerlink&quot; title=&quot;默认bridge网络的细节&quot;&gt;&lt;/a&gt;默认&lt;code&gt;bridge&lt;/code&gt;网络的细节&lt;/h3&gt;&lt;p&gt;默认的&lt;code&gt;bridge&lt;/code&gt;网络在所有的Docker宿主机上都存在，&lt;code&gt;docker network inspect&lt;/code&gt;命令可以显示一个网络的信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network inspect bridge

[
   {
       &amp;quot;Name&amp;quot;: &amp;quot;bridge&amp;quot;,
       &amp;quot;Id&amp;quot;: &amp;quot;f7ab26d71dbd6f557852c7156ae0574bbf62c42f539b50c8ebde0f728a253b6f&amp;quot;,
       &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;,
       &amp;quot;Driver&amp;quot;: &amp;quot;bridge&amp;quot;,
       &amp;quot;IPAM&amp;quot;: {
           &amp;quot;Driver&amp;quot;: &amp;quot;default&amp;quot;,
           &amp;quot;Config&amp;quot;: [
               {
                   &amp;quot;Subnet&amp;quot;: &amp;quot;172.17.0.1/16&amp;quot;,
                   &amp;quot;Gateway&amp;quot;: &amp;quot;172.17.0.1&amp;quot;
               }
           ]
       },
       &amp;quot;Containers&amp;quot;: {},
       &amp;quot;Options&amp;quot;: {
           &amp;quot;com.docker.network.bridge.default_bridge&amp;quot;: &amp;quot;true&amp;quot;,
           &amp;quot;com.docker.network.bridge.enable_icc&amp;quot;: &amp;quot;true&amp;quot;,
           &amp;quot;com.docker.network.bridge.enable_ip_masquerade&amp;quot;: &amp;quot;true&amp;quot;,
           &amp;quot;com.docker.network.bridge.host_binding_ipv4&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
           &amp;quot;com.docker.network.bridge.name&amp;quot;: &amp;quot;docker0&amp;quot;,
           &amp;quot;com.docker.network.driver.mtu&amp;quot;: &amp;quot;9001&amp;quot;
       }
   }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Docker引擎自动创建了网络的子网（&lt;code&gt;Subnet&lt;/code&gt;）和网关（&lt;code&gt;Gateway&lt;/code&gt;）。&lt;code&gt;docker run&lt;/code&gt;命令会自动把新建的容器添加到这个网络中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -itd --name=container1 busybox

3386a527aa08b37ea9232cbcace2d2458d49f44bb05a6b775fba7ddd40d8f92c

$ docker run -itd --name=container2 busybox

94447ca479852d29aeddca75c28f7104df3c3196d7b6d83061879e339946805c
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;新启动两个容器之后重新检视一下&lt;code&gt;bridge&lt;/code&gt;网络的信息，您会看到新启动的那两个容器已经在这个网络中了，它们的id显示在&lt;code&gt;docker network inspect&lt;/code&gt;返回信息里的“Containers”节点下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network inspect bridge

{[
    {
        &amp;quot;Name&amp;quot;: &amp;quot;bridge&amp;quot;,
        &amp;quot;Id&amp;quot;: &amp;quot;f7ab26d71dbd6f557852c7156ae0574bbf62c42f539b50c8ebde0f728a253b6f&amp;quot;,
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;bridge&amp;quot;,
        &amp;quot;IPAM&amp;quot;: {
            &amp;quot;Driver&amp;quot;: &amp;quot;default&amp;quot;,
            &amp;quot;Config&amp;quot;: [
                {
                    &amp;quot;Subnet&amp;quot;: &amp;quot;172.17.0.1/16&amp;quot;,
                    &amp;quot;Gateway&amp;quot;: &amp;quot;172.17.0.1&amp;quot;
                }
            ]
        },
        &amp;quot;Containers&amp;quot;: {
            &amp;quot;3386a527aa08b37ea9232cbcace2d2458d49f44bb05a6b775fba7ddd40d8f92c&amp;quot;: {
                &amp;quot;EndpointID&amp;quot;: &amp;quot;647c12443e91faf0fd508b6edfe59c30b642abb60dfab890b4bdccee38750bc1&amp;quot;,
                &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:11:00:02&amp;quot;,
                &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.17.0.2/16&amp;quot;,
                &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
            },
            &amp;quot;94447ca479852d29aeddca75c28f7104df3c3196d7b6d83061879e339946805c&amp;quot;: {
                &amp;quot;EndpointID&amp;quot;: &amp;quot;b047d090f446ac49747d3c37d63e4307be745876db7f0ceef7b311cbba615f48&amp;quot;,
                &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:11:00:03&amp;quot;,
                &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.17.0.3/16&amp;quot;,
                &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
            }
        },
        &amp;quot;Options&amp;quot;: {
            &amp;quot;com.docker.network.bridge.default_bridge&amp;quot;: &amp;quot;true&amp;quot;,
            &amp;quot;com.docker.network.bridge.enable_icc&amp;quot;: &amp;quot;true&amp;quot;,
            &amp;quot;com.docker.network.bridge.enable_ip_masquerade&amp;quot;: &amp;quot;true&amp;quot;,
            &amp;quot;com.docker.network.bridge.host_binding_ipv4&amp;quot;: &amp;quot;0.0.0.0&amp;quot;,
            &amp;quot;com.docker.network.bridge.name&amp;quot;: &amp;quot;docker0&amp;quot;,
            &amp;quot;com.docker.network.driver.mtu&amp;quot;: &amp;quot;9001&amp;quot;
        }
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上面的&lt;code&gt;docker network inspect&lt;/code&gt;命令显示了连接到这个网络的容器以及与其相关的网络资源信息。这个默认&lt;code&gt;bridge&lt;/code&gt;网络里的容器可以通过IP地址互相通信，其不提供自动的服务发现功能。如果您想在这个默认的&lt;code&gt;bridge&lt;/code&gt;网络中通过容器名进行通信，您必须通过&lt;code&gt;docker run&lt;/code&gt;的遗留&lt;code&gt;--link&lt;/code&gt;选项把容器连接起来。&lt;/p&gt;
&lt;p&gt;您可以连接到一个运行中的容器查看其配置：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker attach container1

root@0cb243cd1293:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:02
          inet addr:172.17.0.2  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:2/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
          RX packets:16 errors:0 dropped:0 overruns:0 frame:0
          TX packets:8 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1296 (1.2 KiB)  TX bytes:648 (648.0 B)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后通过&lt;code&gt;ping&lt;/code&gt;命令发送三个ICMP请求来测试默认&lt;code&gt;bridge&lt;/code&gt;网络里容器的互连性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@0cb243cd1293:/# ping -w3 172.17.0.3

PING 172.17.0.3 (172.17.0.3): 56 data bytes
64 bytes from 172.17.0.3: seq=0 ttl=64 time=0.096 ms
64 bytes from 172.17.0.3: seq=1 ttl=64 time=0.080 ms
64 bytes from 172.17.0.3: seq=2 ttl=64 time=0.074 ms

--- 172.17.0.3 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 0.074/0.083/0.096 ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，通过&lt;code&gt;cat&lt;/code&gt;命令来检查&lt;code&gt;container1&lt;/code&gt;容器的网络配置信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@0cb243cd1293:/# cat /etc/hosts

172.17.0.2    3386a527aa08
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;通过&lt;code&gt;CTRL-p CTRL-q&lt;/code&gt;组合按键从&lt;code&gt;container1&lt;/code&gt;容器中退出并保持其运行，然后连接到&lt;code&gt;container2&lt;/code&gt;容器中并重复下面三个命令。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker attach container2

root@0cb243cd1293:/# ifconfig
eth0      Link encap:Ethernet  HWaddr 02:42:AC:11:00:03
          inet addr:172.17.0.3  Bcast:0.0.0.0  Mask:255.255.0.0
          inet6 addr: fe80::42:acff:fe11:3/64 Scope:Link
          UP BROADCAST RUNNING MULTICAST  MTU:9001  Metric:1
          RX packets:15 errors:0 dropped:0 overruns:0 frame:0
          TX packets:13 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:1166 (1.1 KiB)  TX bytes:1026 (1.0 KiB)

lo        Link encap:Local Loopback
          inet addr:127.0.0.1  Mask:255.0.0.0
          inet6 addr: ::1/128 Scope:Host
          UP LOOPBACK RUNNING  MTU:65536  Metric:1
          RX packets:0 errors:0 dropped:0 overruns:0 frame:0
          TX packets:0 errors:0 dropped:0 overruns:0 carrier:0
          collisions:0 txqueuelen:0
          RX bytes:0 (0.0 B)  TX bytes:0 (0.0 B)

root@0cb243cd1293:/# ping -w3 172.17.0.2

PING 172.17.0.2 (172.17.0.2): 56 data bytes
64 bytes from 172.17.0.2: seq=0 ttl=64 time=0.067 ms
64 bytes from 172.17.0.2: seq=1 ttl=64 time=0.075 ms
64 bytes from 172.17.0.2: seq=2 ttl=64 time=0.072 ms

--- 172.17.0.2 ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 0.067/0.071/0.075 ms
/ # cat /etc/hosts
172.17.0.3    94447ca47985
127.0.0.1    localhost
::1    localhost ip6-localhost ip6-loopback
fe00::0    ip6-localnet
ff00::0    ip6-mcastprefix
ff02::1    ip6-allnodes
ff02::2    ip6-allrouters
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;默认的&lt;code&gt;docker0&lt;/code&gt;网络支持端口映射，&lt;code&gt;docker run --link&lt;/code&gt;命令可以使&lt;code&gt;docker0&lt;/code&gt;网络里的容器互相通信，这些技术手段设置繁琐且易于出错，虽然仍然可用，但最好避免使用并使用自定义的&lt;code&gt;bridge&lt;/code&gt;网络来替代。&lt;/p&gt;
&lt;h2 id=&quot;用户定义型网络&quot;&gt;&lt;a href=&quot;#用户定义型网络&quot; class=&quot;headerlink&quot; title=&quot;用户定义型网络&quot;&gt;&lt;/a&gt;用户定义型网络&lt;/h2&gt;&lt;p&gt;您可以创建您自有的用户定义型网络来实现更好的容器隔离性。Docker提供了一些默认的&lt;strong&gt;网络驱动&lt;/strong&gt;用以创建自定义网络。您可以创建一个新的&lt;strong&gt;bridge网络&lt;/strong&gt;，&lt;strong&gt;overlay网络&lt;/strong&gt;或者&lt;strong&gt;MACVLAN网络&lt;/strong&gt;，您也可以根据自己的需求编写一个&lt;strong&gt;网络插件（network plugin）&lt;/strong&gt;或&lt;strong&gt;远程网络（remote network）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;您可以创建多个网络，您也可以把多个容器加到多个网络中。容器可以在其所属的网络中互相通信，但不能跨越其不所在的网络。一个连接到两个网络的容器可以与这两个网络中的容器互相通信。当一个容器连接到了多个网络中时，其出站连接是由第一个（按词汇文本顺序排序）非内部网络提供。&lt;/p&gt;
&lt;p&gt;下面的几节详细描述了每个Docker自带的网络驱动。&lt;/p&gt;
&lt;h3 id=&quot;bridge网络&quot;&gt;&lt;a href=&quot;#bridge网络&quot; class=&quot;headerlink&quot; title=&quot;bridge网络&quot;&gt;&lt;/a&gt;bridge网络&lt;/h3&gt;&lt;p&gt;最容易创建的用户定义型网络是&lt;code&gt;bridge&lt;/code&gt;网络。这个网络与默认的&lt;code&gt;docker0&lt;/code&gt;网络类似，但有些额外的功能，也有些缺失的功能。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create --driver bridge isolated_nw
1196a4c5af43a21ae38ef34515b6af19236a3fc48122cf585e3f3054d509679b

$ docker network inspect isolated_nw

[
    {
        &amp;quot;Name&amp;quot;: &amp;quot;isolated_nw&amp;quot;,
        &amp;quot;Id&amp;quot;: &amp;quot;1196a4c5af43a21ae38ef34515b6af19236a3fc48122cf585e3f3054d509679b&amp;quot;,
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;bridge&amp;quot;,
        &amp;quot;IPAM&amp;quot;: {
            &amp;quot;Driver&amp;quot;: &amp;quot;default&amp;quot;,
            &amp;quot;Config&amp;quot;: [
                {
                    &amp;quot;Subnet&amp;quot;: &amp;quot;172.21.0.0/16&amp;quot;,
                    &amp;quot;Gateway&amp;quot;: &amp;quot;172.21.0.1/16&amp;quot;
                }
            ]
        },
        &amp;quot;Containers&amp;quot;: {},
        &amp;quot;Options&amp;quot;: {}
    }
]

$ docker network ls

NETWORK ID          NAME                DRIVER
9f904ee27bf5        none                null
cf03ee007fb4        host                host
7fca4eb8c647        bridge              bridge
c5ee82f76de3        isolated_nw         bridge
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;在您创建自定义网络后，您可以通过&lt;code&gt;docker run --network=&amp;lt;NETWORK&amp;gt;&lt;/code&gt;来启动容器并把其连接到这个自定义网络。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --network=isolated_nw -itd --name=container3 busybox

8c1a0a5be480921d669a073393ade66a3fc49933f08bcc5515b37b8144f6d47c

$ docker network inspect isolated_nw
[
    {
        &amp;quot;Name&amp;quot;: &amp;quot;isolated_nw&amp;quot;,
        &amp;quot;Id&amp;quot;: &amp;quot;1196a4c5af43a21ae38ef34515b6af19236a3fc48122cf585e3f3054d509679b&amp;quot;,
        &amp;quot;Scope&amp;quot;: &amp;quot;local&amp;quot;,
        &amp;quot;Driver&amp;quot;: &amp;quot;bridge&amp;quot;,
        &amp;quot;IPAM&amp;quot;: {
            &amp;quot;Driver&amp;quot;: &amp;quot;default&amp;quot;,
            &amp;quot;Config&amp;quot;: [
                {}
            ]
        },
        &amp;quot;Containers&amp;quot;: {
            &amp;quot;8c1a0a5be480921d669a073393ade66a3fc49933f08bcc5515b37b8144f6d47c&amp;quot;: {
                &amp;quot;EndpointID&amp;quot;: &amp;quot;93b2db4a9b9a997beb912d28bcfc117f7b0eb924ff91d48cfa251d473e6a9b08&amp;quot;,
                &amp;quot;MacAddress&amp;quot;: &amp;quot;02:42:ac:15:00:02&amp;quot;,
                &amp;quot;IPv4Address&amp;quot;: &amp;quot;172.21.0.2/16&amp;quot;,
                &amp;quot;IPv6Address&amp;quot;: &amp;quot;&amp;quot;
            }
        },
        &amp;quot;Options&amp;quot;: {}
    }
]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;只有在与自定义网络相同的Docker宿主机上启动的容器才能连接到这个自定义网络，这个网络里的容器可以立即与其它容器进行通信。然而，这个网络本身把内部的容器与外部的网络隔离开了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/networking/images/bridge_network.png&quot; alt=&quot;bridge_network.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;在一个用户定义型的网络中是不支持连接（linking）的。您可以在网络中的容器上公开端口，以便向外部网络公开&lt;code&gt;bridge&lt;/code&gt;网络内的部分内容。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/networking/images/network_access.png&quot; alt=&quot;network_access.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于在单一主机上规划一个相对小的网络，&lt;code&gt;bridge&lt;/code&gt;网络比较有用。而对于大型网络，您可以通过创建一个&lt;code&gt;overlay&lt;/code&gt;网络。&lt;/p&gt;
&lt;h3 id=&quot;Docker引擎swarm模式的overlay网络&quot;&gt;&lt;a href=&quot;#Docker引擎swarm模式的overlay网络&quot; class=&quot;headerlink&quot; title=&quot;Docker引擎swarm模式的overlay网络&quot;&gt;&lt;/a&gt;Docker引擎swarm模式的overlay网络&lt;/h3&gt;&lt;p&gt;在没有外部key-value存储的情况下，您可以在一个以swarm模式运行的管理节点上创建&lt;code&gt;overlay&lt;/code&gt;网络。swarm仅把&lt;code&gt;overlay&lt;/code&gt;网络提供给swarm集群里的节点。当您创建一个需要使用&lt;code&gt;overlay&lt;/code&gt;网络的服务时，管理节点自动在服务节点上添加这个&lt;code&gt;overlay&lt;/code&gt;网络。&lt;/p&gt;
&lt;p&gt;更多关于Docker引擎swarm模式的信息，请参考&lt;a href=&quot;https://docs.docker.com/engine/swarm/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;swarm模式简介&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下面的例子展示了如何创建一个&lt;code&gt;overlay&lt;/code&gt;网络，并把网络提供给swarm集群里的服务节点。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Create an overlay network `my-multi-host-network`.
$ docker network create \
  --driver overlay \
  --subnet 10.0.9.0/24 \
  my-multi-host-network

400g6bwzd68jizzdx5pgyoe95

# Create an nginx service and extend the my-multi-host-network to nodes where
# the service&amp;apos;s tasks run.
$ docker service create --replicas 2 --network my-multi-host-network --name my-web nginx

716thylsndqma81j6kkkb5aus
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;swarm使用的&lt;code&gt;overlay&lt;/code&gt;网络不能供由&lt;code&gt;docker run&lt;/code&gt;命令创建的非swarm模式的容器使用。更多信息请参考&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/overlay-security-model/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker swarm模式下overlay网络的安全模型&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;也请参考&lt;a href=&quot;https://docs.docker.com/engine/swarm/networking/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;连接服务至overlay网络&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;使用外部key-value存储的overlay网络&quot;&gt;&lt;a href=&quot;#使用外部key-value存储的overlay网络&quot; class=&quot;headerlink&quot; title=&quot;使用外部key-value存储的overlay网络&quot;&gt;&lt;/a&gt;使用外部key-value存储的overlay网络&lt;/h3&gt;&lt;p&gt;假如您不使用Docker引擎的swarm模式而创建&lt;code&gt;overlay&lt;/code&gt;网络，您需要一个额外可用的key-value存储服务。支持的key-value存储服务包括Consul，Etcd和Zookeeper。在创建一个&lt;code&gt;overlay&lt;/code&gt;网络之前，您需要安装配置好一个选定的key-value存储服务。规划网络中的Docker宿主机必须能够与这个key-value存储服务进行通信。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;注意：&lt;/em&gt;Docker引擎swarm模式与使用外部key-value存储的网络不兼容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/networking/images/key_value.png&quot; alt=&quot;key_value.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;网络中的每个宿主机都必须运行着Docker引擎，最简单的方式是使用Docker Machine来提供这些宿主机。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/networking/images/engine_on_net.png&quot; alt=&quot;engine_on_net.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;您需要在每个宿主机上开启下面的端口。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Protocol&lt;/th&gt;
&lt;th&gt;Port&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;udp&lt;/td&gt;
&lt;td&gt;4789&lt;/td&gt;
&lt;td&gt;Data plane (VXLAN)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tcp/udp&lt;/td&gt;
&lt;td&gt;7946&lt;/td&gt;
&lt;td&gt;Control plane&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;外部的key-value存储服务也许需要额外的端口。查看官方的文档并开启其它需要的端口。&lt;/p&gt;
&lt;p&gt;一旦您提供了几台宿主机，您可以使用Docker Swarm来快速把它们组成一个具有服务发现的swarm集群。&lt;/p&gt;
&lt;p&gt;为了创建&lt;code&gt;overlay&lt;/code&gt;网络，您需要在每个Docker引擎的守护进程里配置下面的三个选项：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Option&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--cluster-store=PROVIDER://URL&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Describes the location of the KV service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`–cluster-advertise=HOST_IP\&lt;/td&gt;
&lt;td&gt;HOST_IFACE:PORT`&lt;/td&gt;
&lt;td&gt;The IP address or interface of the HOST used for clustering.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;--cluster-store-opt=KEY-VALUE OPTIONS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Options such as TLS certificate or tuning discovery Timers&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;在swarm集群里的其中一台宿主机上创建一个&lt;code&gt;overlay&lt;/code&gt;网络。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create --driver overlay my-multi-host-network
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样就创建了一个跨多主机的网络，&lt;code&gt;overlay&lt;/code&gt;网络提供了容器的完全隔离。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/networking/images/overlay_network.png&quot; alt=&quot;overlay_network.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;然后在每台宿主机上，指定网络的名称来启动容器。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run -itd --network=my-multi-host-network busybox
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一旦连接后，不管容器是在哪台宿主机上，网络里所有的容器都可以互连。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/networking/images/overlay-network-final.png&quot; alt=&quot;overlay-network-final.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;自定义网络插件&quot;&gt;&lt;a href=&quot;#自定义网络插件&quot; class=&quot;headerlink&quot; title=&quot;自定义网络插件&quot;&gt;&lt;/a&gt;自定义网络插件&lt;/h3&gt;&lt;p&gt;如果需要的话，您也可以创建自己的网络驱动插件。网络驱动插件利用Docker的插件机制，这种机制下，插件是一个运行在与Docker守护进程相同宿主机上的进程。&lt;/p&gt;
&lt;p&gt;网络插件与其它插件一样遵循同样的限制和安装规则。所有的插件都调用插件API，它们都需要经历安装、启动、停止和激活的生命周期。&lt;/p&gt;
&lt;p&gt;一旦您创建也安装了一个自定义网络插件，您可以像使用自带的网络驱动一样使用它，如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker network create --driver weave mynet
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;您可以检视这个网络信息，添加容器到这个网络中等。当然不同的插件也许会使用不同的技术或框架。自定义网络也能包含Docker默认网络不具备的功能。有关编写插件的更多信息，请参考&lt;a href=&quot;https://docs.docker.com/engine/extend/legacy_plugins/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;扩展Docker&lt;/a&gt;和&lt;a href=&quot;https://docs.docker.com/engine/extend/plugins_network/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;编写网络驱动插件&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;Docker内嵌的DNS服务&quot;&gt;&lt;a href=&quot;#Docker内嵌的DNS服务&quot; class=&quot;headerlink&quot; title=&quot;Docker内嵌的DNS服务&quot;&gt;&lt;/a&gt;Docker内嵌的DNS服务&lt;/h3&gt;&lt;p&gt;Docker守护进程内嵌了一个DNS服务用于连接到自定义网络中的容器的自动服务发现。容器名的解析首先由这个内嵌的DNS服务器处理。假如内嵌的DNS服务无法解析，解析请求会转发给为容器配置的DNS服务器。为此在创建容器时，只有内嵌的DNS服务器可以通过&lt;code&gt;127.0.0.11&lt;/code&gt;访问到，这个配置在容器的&lt;code&gt;resolv.conf&lt;/code&gt;文件中。更多有关自定义网络的内嵌DNS服务器信息，请参考&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/configure-dns/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Embedded DNS server in user-defined networks&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;连接（Links）&quot;&gt;&lt;a href=&quot;#连接（Links）&quot; class=&quot;headerlink&quot; title=&quot;连接（Links）&quot;&gt;&lt;/a&gt;连接（Links）&lt;/h2&gt;&lt;p&gt;在有Docker的网络特性之前，您可以使用Docker的连接（Link）来实现容器间的互发现。引入Docker网络后，容器可以通过其名字自动发现。但您仍然可以使用连接，但用户定义型网络下的连接工作方式会与默认的&lt;code&gt;docker0&lt;/code&gt;网络下的连接工作方式有所不同。有关默认&lt;code&gt;docker0&lt;/code&gt;桥接网络下的连接特性，请参考&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Legacy Links&lt;/a&gt;，有关用户定义型网络下的连接特性，请参考&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/work-with-networks/#linking-containers-in-user-defined-networks&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;linking containers in user-defined networks&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;相关信息&quot;&gt;&lt;a href=&quot;#相关信息&quot; class=&quot;headerlink&quot; title=&quot;相关信息&quot;&gt;&lt;/a&gt;相关信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/work-with-networks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Work with network commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/get-started-overlay/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get started with multi-host networking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/tutorials/dockervolumes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Managing Data in Containers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/machine&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Machine overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/swarm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Swarm overview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/docker/libnetwork&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Investigate the LibNetwork project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0   &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/&quot; target=&quot;_blank&quot; rel=&quot;externa
    
    </summary>
    
      <category term="翻译" scheme="http://buildship.run/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Docker" scheme="http://buildship.run/tags/Docker/"/>
    
      <category term="Docker基础" scheme="http://buildship.run/tags/Docker%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>编写Dockerfiles的最佳实践 [译文]</title>
    <link href="http://buildship.run/2016/dockerfiles-best-practices/"/>
    <id>http://buildship.run/2016/dockerfiles-best-practices/</id>
    <published>2016-09-09T05:46:25.000Z</published>
    <updated>2016-09-29T03:57:32.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0   &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&lt;/a&gt;&lt;br&gt;由于能力所限，翻译难免有不到位的地方，另外官方文档也时有更新，如有不一致的地方，请以原文为准！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过解读&lt;code&gt;Dockerfiles&lt;/code&gt;的指令，Docker可以自动构建镜像文件。&lt;code&gt;Dockerfiles&lt;/code&gt;属于文本文档，其中有序地包含了建立指定镜像文件所需的所有指令。&lt;code&gt;Dockerfiles&lt;/code&gt;具有特定的文件格式，使用的也是特定的指令。您可以访问&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfiles参考&lt;/a&gt;页面了解基本知识，如果您才刚接触&lt;code&gt;Dockerfiles&lt;/code&gt;代码编写的话，您可以从该页面开始了解。&lt;/p&gt;
&lt;p&gt;本文提供了Docker公司及其社区所推荐的Dockerfiles最佳创建方式，您可以利用这些方法创建易用度高、运行效率好的&lt;code&gt;Dockerfiles&lt;/code&gt;。在此，我们强烈建议您遵循这些建议（如果您在创建官方镜像的话，您必须要坚持这些做法）。&lt;/p&gt;
&lt;p&gt;您可以在&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;buildpack-deps&lt;/a&gt;的Dockerfile页面了解到这些具体实践方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：有关文中提到的Dockerfiles指令，您可以访问&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfiles参考&lt;/a&gt;页面了解详情。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一般准则与建议&quot;&gt;&lt;a href=&quot;#一般准则与建议&quot; class=&quot;headerlink&quot; title=&quot;一般准则与建议&quot;&gt;&lt;/a&gt;一般准则与建议&lt;/h2&gt;&lt;h3 id=&quot;容器的构建应该是转瞬即逝的（ephemeral）&quot;&gt;&lt;a href=&quot;#容器的构建应该是转瞬即逝的（ephemeral）&quot; class=&quot;headerlink&quot; title=&quot;容器的构建应该是转瞬即逝的（ephemeral）&quot;&gt;&lt;/a&gt;容器的构建应该是转瞬即逝的（ephemeral）&lt;/h3&gt;&lt;p&gt;由&lt;code&gt;Dockerfiles&lt;/code&gt;定义的镜像所构建的容器应尽可能转瞬即逝的。这里的“转瞬即逝”指的是，仅需要最低限度的配置工作，就可以完成容器的停用和删除，以及新容器的构建与到位。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;译者注&lt;/strong&gt;：原文所表达的意思应该是指容器的创建或销毁过程应该是敏捷快速的，并不是指容器本身是ephemeral的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;使用-dockerignore文件&quot;&gt;&lt;a href=&quot;#使用-dockerignore文件&quot; class=&quot;headerlink&quot; title=&quot;使用.dockerignore文件&quot;&gt;&lt;/a&gt;使用.dockerignore文件&lt;/h3&gt;&lt;p&gt;通常情况下，最好将每个Dockerfile文件都存储在一个空目录下，这样在构建Dockerfile时，只需将所需的文件添加到目录中即可。但为了提高构建Dockerfile的效率，您可以选择通过添加&lt;code&gt;.dockerignore&lt;/code&gt;文件把不需要的文件与目录排除在外。&lt;code&gt;.dockerignore&lt;/code&gt;文件支持的排除模式与&lt;code&gt;.gitignore&lt;/code&gt;文件相似，有关创建&lt;code&gt;.dockerignore&lt;/code&gt;文件的具体信息请参考&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#dockerignore-file&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;.dockerignore文件&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;避免安装冗余程序包&quot;&gt;&lt;a href=&quot;#避免安装冗余程序包&quot; class=&quot;headerlink&quot; title=&quot;避免安装冗余程序包&quot;&gt;&lt;/a&gt;避免安装冗余程序包&lt;/h3&gt;&lt;p&gt;为降低复杂度和依赖性、减小文件规格、以及节省构建时间，您应该避免安装额外可选的或者不必要的程序包。例如，在数据库镜像文件中，您不需要安装文本编辑器。&lt;/p&gt;
&lt;h3 id=&quot;在每一个容器中只运行一个进程&quot;&gt;&lt;a href=&quot;#在每一个容器中只运行一个进程&quot; class=&quot;headerlink&quot; title=&quot;在每一个容器中只运行一个进程&quot;&gt;&lt;/a&gt;在每一个容器中只运行一个进程&lt;/h3&gt;&lt;p&gt;通常情况下，您应该在一个容器中只运行一个进程。把多个应用程序解耦并运行在多个不同的容器中有助于容器的复用和进行应用的横向扩展。如果某个服务程序依赖与其它服务程序，您可以利用&lt;a href=&quot;https://docs.docker.com/engine/userguide/networking/default_network/dockerlinks/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;容器链接&lt;/a&gt;来解决这个问题。&lt;/p&gt;
&lt;h3 id=&quot;减少镜像层的数量&quot;&gt;&lt;a href=&quot;#减少镜像层的数量&quot; class=&quot;headerlink&quot; title=&quot;减少镜像层的数量&quot;&gt;&lt;/a&gt;减少镜像层的数量&lt;/h3&gt;&lt;p&gt;您需要在&lt;code&gt;Dockerfiles&lt;/code&gt;的可读性（与可维护性）和减少其所用层的数量之间进行平衡选择。在确定镜像层的数量时，您应当谨慎考虑，做出战略性的选择。&lt;/p&gt;
&lt;h3 id=&quot;对多行参数进行排序&quot;&gt;&lt;a href=&quot;#对多行参数进行排序&quot; class=&quot;headerlink&quot; title=&quot;对多行参数进行排序&quot;&gt;&lt;/a&gt;对多行参数进行排序&lt;/h3&gt;&lt;p&gt;尽可能对多行参数按照字母顺序进行排序，这样做能为后期对多行参数的更改提供便利。同时，这样做还能避免使用重复的程序包，有利于参数列表的更新，也方便PR(Pull Request)的阅读和核查。在反斜杠[&lt;code&gt;\&lt;/code&gt;]前面加空格也会有所帮助。&lt;/p&gt;
&lt;p&gt;以下这个例子摘自&lt;code&gt;buildpack-deps&lt;/code&gt;&lt;a href=&quot;https://github.com/docker-library/buildpack-deps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;镜像&lt;/a&gt;：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    bzr \
    cvs \
    git \
    mercurial \
    subversion
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;构建缓存&quot;&gt;&lt;a href=&quot;#构建缓存&quot; class=&quot;headerlink&quot; title=&quot;构建缓存&quot;&gt;&lt;/a&gt;构建缓存&lt;/h3&gt;&lt;p&gt;在构建镜像文件的过程中，Docker会逐行解析并按序执行&lt;code&gt;Dockerfiles&lt;/code&gt;文件中的指令。在检视每条指令的同时，Docker会在已有镜像中查找可复用的缓存，而不是直接创建一个新的（重复的）镜像。如果您压根不想使用缓存，您可以使用&lt;code&gt;docker build&lt;/code&gt;指令的&lt;code&gt;--no-cache=true&lt;/code&gt;选项。&lt;/p&gt;
&lt;p&gt;但如果您要让Docker使用缓存的话，一定要弄清Docker在什么情形下能或者不能找到相匹配的镜像。下面是Docker所遵循的基本规则：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先从缓存中已有的基础镜像开始，读取下一条的指令，并把其与继承自基础镜像的所有子镜像进行比较，看看子镜像中是否有用同样的指令构建而来的，如果没有意味着缓存失效。&lt;/li&gt;
&lt;li&gt;通常情况下，将&lt;code&gt;Dockerfiles&lt;/code&gt;中的指令与子镜像的指令简单地进行语句比对就可以了。然而，有些指令需要进一步测试和解析。&lt;/li&gt;
&lt;li&gt;对于&lt;code&gt;ADD&lt;/code&gt;和&lt;code&gt;COPY&lt;/code&gt;指令，会检查文件的内容和计算每个文件的checksum值。checksum不考虑文件的最后修改时间和最后访问时间。在缓存查找的过程中，Docker把刚才计算出的checksum与已有镜像中的文件的checksum进行比对。如果文件的内容和元数据发生过变化，意味着缓存失效。&lt;/li&gt;
&lt;li&gt;除&lt;code&gt;ADD&lt;/code&gt;和&lt;code&gt;COPY&lt;/code&gt;指令外，缓存检查不会对容器中的文件进行比对。举例来说，执行&lt;code&gt;RUN apt-get -y update&lt;/code&gt;指令时更新的文件，不会被用以检查来判定是否有缓存。在这种情况下，只有指令字符串本身会用于缓存检查。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一旦缓存失效，所有后续的&lt;code&gt;Dockerfiles&lt;/code&gt;指令会创建新的镜像文件，而将不会使用缓存。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;译者注&lt;/strong&gt;：关于镜像构建时的缓存，原文的解释其实不是特别清晰。根据译者的实践，缓存的判断步骤是：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;读取&lt;code&gt;FROM&lt;/code&gt;之下的指令，并在基础镜像及其所有子镜像的镜像层中查找同样的指令（关于子镜像的查找顺序不是很确定）。 举例来说，如果基础镜像是baseimage，并且在本地有两个子镜像imagea和imageb。  &lt;/li&gt;
&lt;li&gt;如果找到匹配的镜像层，就直接使用匹配到的镜像层，并把匹配到的镜像层作为下次缓存查找的父镜像。假设这里匹配到的镜像层来自imageb。  &lt;/li&gt;
&lt;li&gt;如果没找到匹配的镜像层，则断定本地没有缓存，则后面所有的指令都不会使用缓存，而会生成新的镜像层。  &lt;/li&gt;
&lt;li&gt;接着步骤2，读取下一条指令，这时会直接在imageb的那个镜像层的子镜像层中查找是否有同样的指令，后面重复步骤2和步骤3.&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Dockerfile-指令&quot;&gt;&lt;a href=&quot;#Dockerfile-指令&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 指令&quot;&gt;&lt;/a&gt;Dockerfile 指令&lt;/h2&gt;&lt;p&gt;在下文中， 您可以找到各类可用于编写&lt;code&gt;Dockerfile&lt;/code&gt;的指令和其建议的用法。&lt;/p&gt;
&lt;h3 id=&quot;FROM&quot;&gt;&lt;a href=&quot;#FROM&quot; class=&quot;headerlink&quot; title=&quot;FROM&quot;&gt;&lt;/a&gt;FROM&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#from&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的FROM指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;构建您的镜像时尽可能以现有的官方镜像库中的镜像为基础。我们推荐&lt;a href=&quot;https://hub.docker.com/_/debian/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Debian 镜像&lt;/a&gt;，因为该镜像是完整的发行版本，而且受严格管控，所占空间小（目前不足150兆）。&lt;/p&gt;
&lt;h3 id=&quot;RUN&quot;&gt;&lt;a href=&quot;#RUN&quot; class=&quot;headerlink&quot; title=&quot;RUN&quot;&gt;&lt;/a&gt;RUN&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#run&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的RUN指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一如既往地，为了让您的&lt;code&gt;Dockerfile&lt;/code&gt;文件可读性更强，更容易理解，和更方便维护，请把较长或较为复杂的&lt;code&gt;RUN&lt;/code&gt;指令用反斜杠分成多行。&lt;/p&gt;
&lt;h3 id=&quot;apt-get&quot;&gt;&lt;a href=&quot;#apt-get&quot; class=&quot;headerlink&quot; title=&quot;apt-get&quot;&gt;&lt;/a&gt;apt-get&lt;/h3&gt;&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt;指令常用于执行&lt;code&gt;apt-get&lt;/code&gt;指令。在安装程序包的过程中，要注意提防&lt;code&gt;RUN apt-get&lt;/code&gt;指令的几大陷阱。&lt;/p&gt;
&lt;p&gt;在一个以非特权权限运行的容器中，许多来源于基础镜像的“基础”软件包是不会更新升级的，所以在运行指令的过程中要避免运行&lt;code&gt;RUN apt-get upgrade&lt;/code&gt;或&lt;code&gt;dist-upgrade&lt;/code&gt;指令。如果基础镜像中的软件包过期了，您最好联系维护人员。如果您知道某个名称为foo的特定软件包需要升级，那您可以运行&lt;code&gt;apt-get install -y foo&lt;/code&gt;指令进行自动升级。&lt;/p&gt;
&lt;p&gt;在同一个&lt;code&gt;RUN&lt;/code&gt;指令中，始终把&lt;code&gt;RUN apt-get upgrade&lt;/code&gt;指令同&lt;code&gt;apt-get install&lt;/code&gt;结合起来用，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    package-bar \
    package-baz \
    package-foo
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如果在&lt;code&gt;RUN&lt;/code&gt;指令中只运行&lt;code&gt;apt-get upgrade&lt;/code&gt;指令，会导致出现缓存问题进而导致后续的&lt;code&gt;apt-get install&lt;/code&gt;指令结果出现错误，比如您有这样一个Dockerfile指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ubuntu:14.04
RUN apt-get update
RUN apt-get install -y curl
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;镜像构建后，所有的镜像层都会在Docker缓存中。假设您后来修改了&lt;code&gt;apt-get install&lt;/code&gt;指令，增加了额外的软件包：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM ubuntu:14.04
RUN apt-get update
RUN apt-get install -y curl nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Docker会把原来的指令和修改过的指令看成是同样的指令，并会重用前一个步骤的缓存，最后的结果是&lt;code&gt;apt-get updade&lt;/code&gt;指令&lt;em&gt;未能&lt;/em&gt;执行，因为这次的构建指令直接应用的是前一步缓存的结果。&lt;code&gt;apt-get updade&lt;/code&gt;指令未能运行，您所构建的镜像可能包含的是过期版本的&lt;code&gt;curl&lt;/code&gt;和&lt;code&gt;nginx&lt;/code&gt;软件包。&lt;/p&gt;
&lt;p&gt;使用&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y&lt;/code&gt;能确保Dockerfile安装最新的软件包，从而不需要后续写代码或手动干预进行更新。这种技巧叫做“缓存破坏（cache busting）”。您也可以通过明确指定软件包的版本来实现“缓存破坏”，这种方式也称为“版本固定（version pinning）”，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    package-bar \
    package-foo=1.3.*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;“版本固定”会迫使构建时获取特定的版本，而不管缓存里有什么。这还可以减少因软件包预期外的变化引起的故障。&lt;/p&gt;
&lt;p&gt;下面是一个格式良好的&lt;code&gt;RUN&lt;/code&gt;指令，演示了所有有关&lt;code&gt;apt-get&lt;/code&gt;的建议写法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    aufs-tools \
    automake \
    build-essential \
    curl \
    dpkg-sig \
    libcap-dev \
    libsqlite3-dev \
    mercurial \
    reprepro \
    ruby1.9.1 \
    ruby1.9.1-dev \
    s3cmd=1.1.* \
 &amp;amp;&amp;amp; rm -rf /var/lib/apt/lists/*
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中的&lt;code&gt;s3cmd&lt;/code&gt;指令明确指定了软件包版本为&lt;code&gt;1.1.0*&lt;/code&gt;。如果镜像之前用的是旧版本，那指定新版本之后就会执行&lt;code&gt;apt-get update&lt;/code&gt;指令，确保新版本的安装。把软件包按行排列也能避免软件包重复。&lt;/p&gt;
&lt;p&gt;此外，清除软件包缓存并删除&lt;code&gt;/var/lib/apt/lists&lt;/code&gt;有助于缩小镜像文件的大小。由于&lt;code&gt;RUN&lt;/code&gt;指令首先执行了&lt;code&gt;apt-get updade&lt;/code&gt;指令，所以在&lt;code&gt;apt-get install&lt;/code&gt;指令执行之前，软件包缓存总是更新过的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：Debia和Ubuntu的官方镜像文件都会&lt;a href=&quot;https://github.com/docker/docker/blob/03e2923e42446dbb830c654d0eec323a0b4ef02a/contrib/mkimage/debootstrap#L82-L105&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自动运行&lt;/a&gt;&lt;code&gt;apt-get clean&lt;/code&gt;，不需要做额外处理。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;CMD&quot;&gt;&lt;a href=&quot;#CMD&quot; class=&quot;headerlink&quot; title=&quot;CMD&quot;&gt;&lt;/a&gt;CMD&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#cmd&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的CMD指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;配合其它参数一起，&lt;code&gt;CMD&lt;/code&gt;指令可以用于运行镜像中所包含的软件。&lt;code&gt;CMD&lt;/code&gt;应始终以&lt;code&gt;[“executable”, “param1”, “param2”…]&lt;/code&gt;的形式使用。如果镜像用于某种服务（如Apache， Rails等），您需要像&lt;code&gt;CMD [&amp;quot;apache2&amp;quot;,&amp;quot;-DFOREGROUND&amp;quot;]&lt;/code&gt;这样的指令。当然，这种指令形式适用于所有服务型的镜像。&lt;/p&gt;
&lt;p&gt;通常情况下，运行&lt;code&gt;CMD&lt;/code&gt;指令时要为其提供一个交互的shell终端（bash, python, perl等），例如&lt;code&gt;CMD [&amp;quot;perl&amp;quot;, &amp;quot;-de0&amp;quot;]&lt;/code&gt;，&lt;code&gt;CMD [&amp;quot;python&amp;quot;]&lt;/code&gt;或&lt;code&gt;CMD [“php”, “-a”]&lt;/code&gt;。意味着您在执行&lt;code&gt;docker run -it python&lt;/code&gt;这类指令时，您会进入一个可用的shell环境。一般情况下，&lt;code&gt;CMD&lt;/code&gt;很少会以&lt;code&gt;CMD [“param”, “param”]&lt;/code&gt;的形式与&lt;code&gt;ENTRYPOINT&lt;/code&gt;一同使用，除非您或您的预期用户已经很了解&lt;code&gt;ENTRYPOINT&lt;/code&gt;是如何运作的。&lt;/p&gt;
&lt;h3 id=&quot;EXPOSE&quot;&gt;&lt;a href=&quot;#EXPOSE&quot; class=&quot;headerlink&quot; title=&quot;EXPOSE&quot;&gt;&lt;/a&gt;EXPOSE&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#expose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的EXPOSE指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EXPOSE&lt;/code&gt;指令指定容器监听的端口，您应该设定应用程序使用常用或惯用的端口。例如，一个包含Apache网页服务器的镜像文件应使用&lt;code&gt;EXPOSE 80&lt;/code&gt;指令，而含有MongoDB的镜像文件则应使用&lt;code&gt;EXPOSE 27017&lt;/code&gt;指令，以此类推。&lt;/p&gt;
&lt;p&gt;如果客户从外部访问的话，他们可以执行&lt;code&gt;docker run&lt;/code&gt;指令的同时使用特定标识，指明如何将客户所选的端口与指定端口连接起来。至于容器链接的问题，Docker为连接双方的容器提供了环境变量支持(如, MYSQL_PORT_3306_TCP)。&lt;/p&gt;
&lt;h3 id=&quot;ENV&quot;&gt;&lt;a href=&quot;#ENV&quot; class=&quot;headerlink&quot; title=&quot;ENV&quot;&gt;&lt;/a&gt;ENV&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#env&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的ENV指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为确保新软件的流畅运行，您可以用&lt;code&gt;ENV&lt;/code&gt;指令为容器中的软件更新&lt;code&gt;PATH&lt;/code&gt;环境变量。例如，&lt;code&gt;ENV PATH /usr/local/nginx/bin:$PATHV&lt;/code&gt;指令能确保&lt;code&gt;CMD [“nginx”]&lt;/code&gt;的正确运行。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ENV&lt;/code&gt;指令也可以为容器中的特定服务提供运行所必须的环境变量，如Postgres的&lt;code&gt;PGDATA&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;最后，&lt;code&gt;ENV&lt;/code&gt;指令也能用于设定常用的版本号，有利于维护版本，例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ENV PG_MAJOR 9.3
ENV PG_VERSION 9.3.4
RUN curl -SL http://example.com/postgres-$PG_VERSION.tar.xz | tar -xJC /usr/src/postgress &amp;amp;&amp;amp;
ENV PATH /usr/local/postgres-$PG_MAJOR/bin:$PAT
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;和程序中的常量一样（和硬编码相反），通过这种方式您可以改变单个的&lt;code&gt;ENV&lt;/code&gt;指令，从而自动维护容器中所安装软件的版本。&lt;/p&gt;
&lt;h3 id=&quot;ADD或COPY&quot;&gt;&lt;a href=&quot;#ADD或COPY&quot; class=&quot;headerlink&quot; title=&quot;ADD或COPY&quot;&gt;&lt;/a&gt;ADD或COPY&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#add&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的ADD指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#copy&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的COPY指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;虽然&lt;code&gt;ADD&lt;/code&gt;指令和&lt;code&gt;COPY&lt;/code&gt;指令功能相似，但通常情况下，&lt;code&gt;COPY&lt;/code&gt;指令更被推荐。因为&lt;code&gt;COPY&lt;/code&gt;指令的运行过程要比&lt;code&gt;ADD&lt;/code&gt;指令更具透明性。&lt;code&gt;COPY&lt;/code&gt;只支持将基本的本地文件复制到容器中，而&lt;code&gt;ADD&lt;/code&gt;还有一些其它不是很明显的功能（例如本地tar文件的解压缩、远程URL支持），因此，&lt;code&gt;ADD&lt;/code&gt;指令最好用于将本地tar文件自动解压到镜像中，比如&lt;code&gt;ADD rootfs.tar.xz /&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果您的&lt;code&gt;Dockerfile&lt;/code&gt;中的多个步骤用到用于不同目的的文件，最好不好将这些文件一次&lt;code&gt;COPY&lt;/code&gt;过来，而是要分别&lt;code&gt;COPY&lt;/code&gt;。这样能确保只有特定文件更改才会使特定步骤的缓存失效。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;COPY requirements.txt /tmp/
RUN pip install --requirement /tmp/requirements.txt
COPY . /tmp/
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;相比把&lt;code&gt;COPY . /tmp/&lt;/code&gt;指令放在&lt;code&gt;RUN pip install --requirement /tmp/requirements.txt&lt;/code&gt;指令之前而言，这样的方式会让&lt;code&gt;RUN pip install --requirement /tmp/requirements.txt&lt;/code&gt;有更多机会使用缓存。&lt;/p&gt;
&lt;p&gt;因为镜像文件的大小十分重要，所以非常不建议使用&lt;code&gt;ADD&lt;/code&gt;指令从远端URLs上获取软件包，推荐您使用&lt;code&gt;curl&lt;/code&gt;或&lt;code&gt;wget&lt;/code&gt;。这样的话，你可以在解压完成后删除不需要的文件，同时不会在镜像中增加额外的层。例如，您应该避免使用下面这样的指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ADD http://example.com/big.tar.xz /usr/src/things/
RUN tar -xJf /usr/src/things/big.tar.xz -C /usr/src/things
RUN make -C /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;而应该使用这样的指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;RUN mkdir -p /usr/src/things \
&amp;amp;&amp;amp; curl -SL http://example.com/big.tar.xz \
| tar -xJC /usr/src/things \
&amp;amp;&amp;amp; make -C /usr/src/things all
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对于其它不需要&lt;code&gt;ADD&lt;/code&gt;具备的本地tar文件自动解压功能的项目（文件、目录），您应该总是使用&lt;code&gt;COPY&lt;/code&gt;指令。&lt;/p&gt;
&lt;h3 id=&quot;ENTRYPOINT&quot;&gt;&lt;a href=&quot;#ENTRYPOINT&quot; class=&quot;headerlink&quot; title=&quot;ENTRYPOINT&quot;&gt;&lt;/a&gt;ENTRYPOINT&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#entrypoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的ENTRYPOINT指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt;指令的最大用途是可以设定镜像的主要指令，就好像运行镜像就是在运行那个命令（同时&lt;code&gt;CMD&lt;/code&gt;指令会作为默认参数传入）。&lt;/p&gt;
&lt;p&gt;让我们以一个&lt;code&gt;s3cmd&lt;/code&gt;命令行工具的镜像为例：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ENTRYPOINT [&amp;quot;s3cmd&amp;quot;]
CMD [&amp;quot;--help&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;镜像可以按用如下的方式运行来显示命令帮助信息：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run s3cmd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者通过使用正确的参数执行指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run s3cmd ls s3://mybucket
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样做很有帮助，因为镜像名字也是&lt;code&gt;s3cmd&lt;/code&gt;命令的名字。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ENTRYPOINT&lt;/code&gt;指令也可以与helper脚本相结合，采用与上文指令相似的方式运行。&lt;/p&gt;
&lt;p&gt;例如，&lt;a href=&quot;https://hub.docker.com/_/postgres/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Postgres 官方镜像&lt;/a&gt;就把下列脚本作为它的&lt;code&gt;ENTRYPOINT&lt;/code&gt;指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/bash
set -e

if [ &amp;quot;$1&amp;quot; = &amp;apos;postgres&amp;apos; ]; then
   chown -R postgres &amp;quot;$PGDATA&amp;quot;

   if [ -z &amp;quot;$(ls -A &amp;quot;$PGDATA&amp;quot;)&amp;quot; ]; then
      gosu postgres initdb
   fi

   exec gosu postgres &amp;quot;$@&amp;quot;
fi

exec &amp;quot;$@&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;： 该脚本使用了&lt;a href=&quot;http://wiki.bash-hackers.org/commands/builtin/exec&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;exec Bash 指令&lt;/a&gt;，所以最后运行的应用程序就成了容器的PID1的进程。这样一来，该应用程序便可接收到向该容器发送过来的任何Unix信号。更多详情参见&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#entrypoint&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ENTRYPOINT&lt;/a&gt;页面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;helper脚本已经被复制到容器中了，可以在容器启动时通过&lt;code&gt;ENTRYPOINT&lt;/code&gt;指令运行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;COPY ./docker-entrypoint.sh /
ENTRYPOINT [&amp;quot;/docker-entrypoint.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;该脚本可以让用户通过不同方式与Postgres交互。&lt;/p&gt;
&lt;p&gt;该脚本可以启动Postgres：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run postgres
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者，该脚本可以用于运行Postgres并传入参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run postgres postgres --help
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最后，该脚本亦可以启动不同的工具，如Bash:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ docker run --rm -it postgres bash
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;VOLUME&quot;&gt;&lt;a href=&quot;#VOLUME&quot; class=&quot;headerlink&quot; title=&quot;VOLUME&quot;&gt;&lt;/a&gt;VOLUME&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#volume&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的VOLUME指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;VOLUME&lt;/code&gt;指令可用于公开数据库存储区域、配置存储或由Docker容器创建的文件或文件夹。建议您将&lt;code&gt;VOLUME&lt;/code&gt;指令用于您镜像文件中可变的或用户可更改的部分。&lt;/p&gt;
&lt;h3 id=&quot;USER&quot;&gt;&lt;a href=&quot;#USER&quot; class=&quot;headerlink&quot; title=&quot;USER&quot;&gt;&lt;/a&gt;USER&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#user&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的USER指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如果某服务可以在无特权权限的情况下运行，那您可以用&lt;code&gt;USER&lt;/code&gt;指令变成一个非root用户。首先用&lt;code&gt;RUN groupadd -r postgres &amp;amp;&amp;amp; useradd -r -g postgres postgres&lt;/code&gt;指令在&lt;code&gt;Dockerfile&lt;/code&gt;中创建用户或用户组：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：镜像中的用户和用户组的UID/GID是非确定性的，不管镜像有没有重建，都会分配“新的”UID/GID。所以如果这点很重要的话，您应当明确指定特定的UID/GID。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;您最好不要安装或使用&lt;code&gt;sudo&lt;/code&gt;，因为&lt;code&gt;sudo&lt;/code&gt;有不可预知的TTY和不可预知的信号转发行为，使用&lt;code&gt;sudo&lt;/code&gt;会带来更多的麻烦。如果您的确需要功能和&lt;code&gt;sudo&lt;/code&gt;相似的程序的话（例如需要root用户初始化守护进程但以非root用户执行），您可以使用&lt;a href=&quot;https://github.com/tianon/gosu&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;“gosu”&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后，为减少镜像层级，降低复杂性，您应当避免频繁切换&lt;code&gt;USER&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;WORKDIR&quot;&gt;&lt;a href=&quot;#WORKDIR&quot; class=&quot;headerlink&quot; title=&quot;WORKDIR&quot;&gt;&lt;/a&gt;WORKDIR&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#workdir&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的WORKDIR指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为确保清晰性和可靠性，您应当总是为&lt;code&gt;WORKDIR&lt;/code&gt;指定绝对路径。同时应该尽可能使用&lt;code&gt;WORKDIR&lt;/code&gt;指令，而不是选择用难以解读、难以调试和难以维护的指令，如&lt;code&gt;RUN cd … &amp;amp;&amp;amp; do-something&lt;/code&gt;。&lt;/p&gt;
&lt;h3 id=&quot;ONBUILD&quot;&gt;&lt;a href=&quot;#ONBUILD&quot; class=&quot;headerlink&quot; title=&quot;ONBUILD&quot;&gt;&lt;/a&gt;ONBUILD&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/#onbuild&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考中的ONBUILD指令&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Dockerfile&lt;/code&gt;镜像构建完成后，后续子镜像的构建中&lt;code&gt;ONBUILD&lt;/code&gt;指令才会运行。&lt;code&gt;ONBUILD&lt;/code&gt;指令会在所有的子镜像中执行。&lt;code&gt;ONBUILD&lt;/code&gt;指令相当于父镜像传给子镜像的指令。&lt;/p&gt;
&lt;p&gt;Docker会在子&lt;code&gt;Dockerfile&lt;/code&gt;文件执行任何指令之前先执行&lt;code&gt;ONBUILD&lt;/code&gt;指令。&lt;/p&gt;
&lt;p&gt;在从给定的镜像构建新的镜像，&lt;code&gt;ONBUILD&lt;/code&gt;指令比较有用。举例来说，您可以把&lt;code&gt;ONBUILD&lt;/code&gt;指令用于构建一个多语言用户软件的镜像，特定语言用特定语言的&lt;code&gt;Dockerfile&lt;/code&gt;实现，具体参考&lt;br&gt;&lt;a href=&quot;https://github.com/docker-library/ruby/blob/master/2.1/onbuild/Dockerfile&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Ruby’s ONBUILD variants&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;通过&lt;code&gt;ONBUILD&lt;/code&gt;指令构建的镜像应设立单独的标签，例如&lt;code&gt;ruby:1.9-onbuild&lt;/code&gt;或者&lt;code&gt;ruby:2.0-onbuild&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;ONBUILD&lt;/code&gt;指令中插入&lt;code&gt;ADD&lt;/code&gt;或&lt;code&gt;COPY&lt;/code&gt;指令时要注意。如果在新构建的镜像里要&lt;code&gt;ADD&lt;/code&gt;的资源丢了，那这个&lt;code&gt;ONBUILD&lt;/code&gt;的镜像构建会失败。像上面推荐的那样，您可以增加一个单独的标签，这样&lt;code&gt;Dockerfile&lt;/code&gt;创建者就可以作出相应选择并消除构建失败的风险。&lt;/p&gt;
&lt;h2 id=&quot;官方镜像库示例&quot;&gt;&lt;a href=&quot;#官方镜像库示例&quot; class=&quot;headerlink&quot; title=&quot;官方镜像库示例&quot;&gt;&lt;/a&gt;官方镜像库示例&lt;/h2&gt;&lt;p&gt;这些官方镜像库中有比较好的&lt;code&gt;Dockerfile&lt;/code&gt;可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/_/golang/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;GO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/_/perl/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Perl&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/_/hylang/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://hub.docker.com/_/rails/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Rails&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;附加资源&quot;&gt;&lt;a href=&quot;#附加资源&quot; class=&quot;headerlink&quot; title=&quot;附加资源&quot;&gt;&lt;/a&gt;附加资源&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/reference/builder/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dockerfile参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/baseimages/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;基础镜像详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-hub/builds/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;自动化构建详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/docker-hub/official_repos/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;官方镜像库使用指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0   &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&quot; tar
    
    </summary>
    
      <category term="翻译" scheme="http://buildship.run/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Docker" scheme="http://buildship.run/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>理解镜像、容器与存储驱动 [译文]</title>
    <link href="http://buildship.run/2016/understand-images-and-containers/"/>
    <id>http://buildship.run/2016/understand-images-and-containers/</id>
    <published>2016-09-06T05:46:25.000Z</published>
    <updated>2016-09-29T03:02:30.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0  &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&lt;/a&gt;&lt;br&gt;由于能力所限，翻译难免有不到位的地方，另外官方文档也时有更新，如有不一致的地方，请以原文为准！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;理解镜像、容器与存储驱动&quot;&gt;&lt;a href=&quot;#理解镜像、容器与存储驱动&quot; class=&quot;headerlink&quot; title=&quot;理解镜像、容器与存储驱动&quot;&gt;&lt;/a&gt;理解镜像、容器与存储驱动&lt;/h2&gt;&lt;p&gt;为了更高效的使用存储驱动，您需要理解Docker是如何构建和存储镜像文件的，然后，您需要理解容器是如何使用镜像的，最后就镜像和容器的操作所相关的技术为您做一个简单介绍。&lt;/p&gt;
&lt;h2 id=&quot;镜像和镜像层&quot;&gt;&lt;a href=&quot;#镜像和镜像层&quot; class=&quot;headerlink&quot; title=&quot;镜像和镜像层&quot;&gt;&lt;/a&gt;镜像和镜像层&lt;/h2&gt;&lt;p&gt;每个Docker镜像引用了来自不同文件系统的只读层列表，镜像层和镜像层堆叠在一起组成一个容器的基础根文件系统。下面的图展示了一个由4个层组成的Ubuntu 15.04的镜像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/image-layers.jpg&quot; alt=&quot;image-layers.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Docker的存储驱动负责这些镜像层的堆叠并提供一个联合的文件视图。&lt;/p&gt;
&lt;p&gt;当您创建一个新的容器，在堆栈的顶层会创建一个新的薄薄的可写层，这个层通常称为“容器层”。对容器运行期间的更改（如创建新文件，更改已有文件和删除文件）都会写到这个薄的可写层中。下面的图展示了一个基于Ubuntu 15.04镜像的容器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/container-layers.jpg&quot; alt=&quot;container-layers.jpg&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;可寻址内容存储（Content-addressable-storage）&quot;&gt;&lt;a href=&quot;#可寻址内容存储（Content-addressable-storage）&quot; class=&quot;headerlink&quot; title=&quot;可寻址内容存储（Content addressable storage）&quot;&gt;&lt;/a&gt;可寻址内容存储（Content addressable storage）&lt;/h2&gt;&lt;p&gt;Docker 1.10引入了一个新的可寻址内容存储模型，这是一个用于定位磁盘上镜像和容器数据的全新方法。1.10之前的版本是通过一个随机生成的UUID来引用镜像和层数据，而在新模型中取而代之的是&lt;em&gt;安全内容哈希（secure content hash）&lt;/em&gt;。&lt;/p&gt;
&lt;p&gt;新模型增强了安全性，提供了一个内嵌的方式来防止ID冲突，并且保证了在镜像的拉取（pull），推送（push）、载入（load）和保存（save）等操作后数据的一致性。同时对于来自不同编译版本的镜像文件的层，也提供了更好的复用机制。&lt;/p&gt;
&lt;p&gt;下面的图是之前的图的升级版，着重突出了Docker 1.10的更改：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/container-layers-cas.jpg&quot; alt=&quot;container-layers-cas.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;如您看到的一样，所有镜像层的ID都是加密的哈希，然而容器的ID仍然是随机生成的UUID。&lt;/p&gt;
&lt;p&gt;关于新模型，有些事项需要注意，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;现有镜像的迁移&lt;/li&gt;
&lt;li&gt;镜像和层的文件系统结构&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;由先前版本Docker拉取和创建的镜像文件需要迁移并升级后才能使用新模型的机制。迁移包括计算新的安全校验码（secure checksums），这个操作会在您第一次运行更新版的Docker守护进程时自动完成。迁移操作完成后，所有的镜像和标签（tag）都会使用全新的安全哈希ID。&lt;/p&gt;
&lt;p&gt;尽管迁移操作是自动并无须人工干预的，但操作本身是计算密集型操作，意味着如果有很多镜像文件，升级会花费较长时间，并且在升级期间，Docker守护进程会停止处理其它操作请求。&lt;/p&gt;
&lt;p&gt;有一个迁移工具可以帮助您在升级Docker守护进程之前迁移升级已有镜像文件至新格式，这样Docker守护进程无需就地执行升级操作，从而避免了必要的宕机时间。同时也提供了一个手动升级的方法，这样这些镜像可以在手动升级后在已经是新版本Docker守护进程的环境中使用。&lt;/p&gt;
&lt;p&gt;这个迁移工具由Docker公司官方提供，其本身是一个容器，可以在&lt;a href=&quot;https://github.com/docker/v1.10-migrator/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这里下载&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;在运行这个迁移工具的容器时，您需要共享容器宿主机的数据目录给容器，如果您使用的是Docker的默认数据目录地址，运行迁移工具的容器命令如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ sudo docker run --rm -v /var/lib/docker:/var/lib/docker docker/v1.10-migrator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;假如您使用的是&lt;code&gt;devicemapper&lt;/code&gt;存储驱动，您需要使用&lt;code&gt;--privileged&lt;/code&gt;选项，这样容器才有权限访问您的存储设备。&lt;/p&gt;
&lt;h3 id=&quot;迁移示例&quot;&gt;&lt;a href=&quot;#迁移示例&quot; class=&quot;headerlink&quot; title=&quot;迁移示例&quot;&gt;&lt;/a&gt;迁移示例&lt;/h3&gt;&lt;p&gt;下面的示例演示了在1.9.1版本的Docker守护进程和AUFS存储驱动的Docker宿主机上使用这个迁移工具。Docker宿主机是一个运行在亚马逊EC2上的环境，环境配置为1 vCPU，1GB内存，和1块8G的固态EBS磁盘。Docker的数据目录（&lt;code&gt;/var/lib/docker&lt;/code&gt;）占用了2GB的空间。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker images&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;jenkins             latest              285c9f0f9d3d        17 hours ago        708.5 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysql               latest              d39c3fa09ced        8 days ago          360.3 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mongo               latest              a74137af4532        13 days ago         317.4 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;postgres            latest              9aae83d4127f        13 days ago         270.7 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;redis               latest              8bccd73928d9        2 weeks ago         151.3 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;centos              latest              c8a648134623        4 weeks ago         196.6 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu              15.04               c8be1ac8145a        7 weeks ago         131.3 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sudo du -hs /var/lib/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2.0G    /var/lib/docker&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ time docker run --rm -v /var/lib/docker:/var/lib/docker docker/v1.10-migrator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Unable to find image &amp;apos;docker/v1.10-migrator:latest&amp;apos; locally&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;latest: Pulling from docker/v1.10-migrator&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ed1f33c5883d: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b3ca410aa2c1: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2b9c6ed9099e: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dce7e318b173: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Digest: sha256:bd2b245d5d22dd94ec4a8417a9b81bb5e90b171031c6e216484db3fe300c2097&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Status: Downloaded newer image for docker/v1.10-migrator:latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time=&amp;quot;2016-01-27T12:31:06Z&amp;quot; level=debug msg=&amp;quot;Assembling tar data for 01e70da302a553ba13485ad020a0d77dbb47575a31c4f48221137bb08f45878d from /var/lib/docker/aufs/diff/01e70da302a553ba13485ad020a0d77dbb47575a31c4f48221137bb08f45878d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time=&amp;quot;2016-01-27T12:31:06Z&amp;quot; level=debug msg=&amp;quot;Assembling tar data for 07ac220aeeef9febf1ac16a9d1a4eff7ef3c8cbf5ed0be6b6f4c35952ed7920d from /var/lib/docker/aufs/diff/07ac220aeeef9febf1ac16a9d1a4eff7ef3c8cbf5ed0be6b6f4c35952ed7920d&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;snip&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time=&amp;quot;2016-01-27T12:32:00Z&amp;quot; level=debug msg=&amp;quot;layer dbacfa057b30b1feaf15937c28bd8ca0d6c634fc311ccc35bd8d56d017595d5b took 10.80 seconds&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;real    0m59.583s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user    0m0.046s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys     0m0.008s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;docker run&lt;/code&gt;前的&lt;code&gt;time&lt;/code&gt;命令用于输出操作所占用的时间。如您看到的，迁移占用2GB的7个镜像文件共占时约1分钟，其中包括拉取&lt;code&gt;docker/v1.10-migrator&lt;/code&gt;镜像所花的3.5秒。同样的操作在一个具有40 vCPU，160GB内存和8GB的IOPS磁盘的环境中所占用的时间为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;real    0m9.871s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;user    0m0.094s&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sys     0m0.021s&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这说明迁移的操作会受到硬件条件的影响。&lt;/p&gt;
&lt;h2 id=&quot;容器和层&quot;&gt;&lt;a href=&quot;#容器和层&quot; class=&quot;headerlink&quot; title=&quot;容器和层&quot;&gt;&lt;/a&gt;容器和层&lt;/h2&gt;&lt;p&gt;容器和镜像最显著的区别在于顶层的可写层，对容器的改动（如添加新文件或更改已有文件）会被存储到这个可写层中。当容器被删除时，这个可写层同时也会被删除，而底层的镜像保持不变。&lt;/p&gt;
&lt;p&gt;因为每个容器都有它自己的可写层，并且所有的更改都存储在这个可写层，这意味着多个容器可以共享使用相同的底层镜像，同时可以有它们自己的数据状态。下图显示了共享使用相同的Ubuntu 15.04镜像的多个容器：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/sharing-layers.jpg&quot; alt=&quot;sharing-layers.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;Docker存储驱动负责启用和管理镜像层和可写容器层，不同的存储驱动实现方式会有不同。Docker镜像和容器管理的两个关键技术分别是可堆叠的镜像层和写时复制（copy-on-write）。&lt;/p&gt;
&lt;h2 id=&quot;写时复制&quot;&gt;&lt;a href=&quot;#写时复制&quot; class=&quot;headerlink&quot; title=&quot;写时复制&quot;&gt;&lt;/a&gt;写时复制&lt;/h2&gt;&lt;p&gt;共享是优化资源的一种好方法，大家在日常生活中也习惯性的这么做。举例来说，双胞胎Jane和Joseph在不同时间参加不同老师的代数课，他们就可以互相传递使用同一本练习书。现在假设Jane要完成书中第11页的功课，这时Jane把第11页复制下来并完成她的功课，然后把这个副本交上去。这样原始的练习书并没有变化，而Jane变更的是第11页的副本。&lt;/p&gt;
&lt;p&gt;写时复制的策略是类似于这样的拷贝与共享的机制。使用这种策略，需要相同数据的系统进程共享使用相同实例的那份数据而不是使用那份数据的副本。在某个时间，如果一个进程需要修改或者写入数据，这个时候系统才会特别复制一份数据以供这个进程使用。只有这个进程在使用复制出来的那份数据，其它进程继续共享使用原始数据。&lt;/p&gt;
&lt;p&gt;Docker镜像和容器都使用了写时复制的机制。写时复制的策略优化了镜像的磁盘占用和容器启动时的性能。接下来的部分看看镜像和容器是如何通过共享和复制来利用写时复制的。&lt;/p&gt;
&lt;h3 id=&quot;用分享机制实现更小的镜像&quot;&gt;&lt;a href=&quot;#用分享机制实现更小的镜像&quot; class=&quot;headerlink&quot; title=&quot;用分享机制实现更小的镜像&quot;&gt;&lt;/a&gt;用分享机制实现更小的镜像&lt;/h3&gt;&lt;p&gt;本节介绍镜像层和写时复制技术。所有的镜像和容器层都存在容器宿主机的本地存储内，并由存储驱动程序管理。在基于Linux的Docker宿主机上，通常位于&lt;code&gt;/var/lib/docker/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在使用&lt;code&gt;docker pull&lt;/code&gt;和&lt;code&gt;docker push&lt;/code&gt;命令拉取和推送镜像时，Docker客户端会显示镜像的层信息。下面的命令是从Docker Hub上拉取Ubuntu 15.04镜像。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15.04: Pulling from library/ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1ba8ac955b97: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f157c4e5ede7: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0b7e98f84c4c: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a3ed95caeb02: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Digest: sha256:5e279a9df07990286cce22e1b0f5b0490629ca6d187698746ae5e28e604a640e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Status: Downloaded newer image for ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;通过输出信息，您可以看到上述命令实际上拉取了4个镜像层。上面的每一行都列出了镜像层的UUID或者加密的哈希ID，这四个层组成了Ubuntu 15.04的镜像。&lt;/p&gt;
&lt;p&gt;每个镜像层都存储在Docker宿主机的本地存储下的单独目录中。&lt;/p&gt;
&lt;p&gt;Docker 1.10之前的版本里，每个镜像层都存储在与镜像层ID相同名称的目录中，而在Docker 1.10和之后的版本中情况会不一样。举例来说，下面的命令展示了在一个运行着Docker 1.9.1版本的宿主机上，从Docker Hub拉取一个镜像，然后紧接着显示的是存储镜像层的目录列表。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$  docker pull ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15.04: Pulling from library/ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47984b517ca9: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df6e891a3ea9: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e65155041eed: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c8be1ac8145a: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Digest: sha256:5e279a9df07990286cce22e1b0f5b0490629ca6d187698746ae5e28e604a640e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Status: Downloaded newer image for ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls /var/lib/docker/aufs/layers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47984b517ca9ca0312aced5c9698753ffa964c2015f2a5f18e5efa9848cf30e2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;c8be1ac8145a6e59a55667f573883749ad66eaeef92b4df17e5ea1260e2d7356&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df6e891a3ea9cdce2a388a2cf1b1711629557454fd120abd5be6d32329a0e0ac&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;e65155041eed7ec58dea78d90286048055ca75d41ea893c7246e794389ecf203&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意看一下这四个目录的名称和下载的镜像的层的ID是如何匹配的，现在来比较一下同样的操作在运行着Docker 1.10版本的宿主机上的情况。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker pull ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15.04: Pulling from library/ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1ba8ac955b97: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f157c4e5ede7: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0b7e98f84c4c: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a3ed95caeb02: Pull complete&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Digest: sha256:5e279a9df07990286cce22e1b0f5b0490629ca6d187698746ae5e28e604a640e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Status: Downloaded newer image for ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ls /var/lib/docker/aufs/layers/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1d6674ff835b10f76e354806e16b950f91a191d3b471236609ab13a930275e24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5dbb0cbe0148cf447b9464a358c1587be586058d9a4c9ce079320265e2bb94e7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bef7199f2ed8e86fa4ada1309cfad3089e0542fec8894690529e4c04a7ca2d73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ebf814eccfe98f2704660ca1d844e4348db3b5ccc637eb905d4818fbfb00a06a&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到这次这四个目录的名称和下载的镜像的层的ID是不匹配的。&lt;/p&gt;
&lt;p&gt;尽管版本1.10前后的镜像管理方式有差异，Docker的所有版本中镜像的层都是可以共享的。举例来说，假如您要拉取的镜像中的某些层和一个已经在本地的镜像中的层是共享的，Docker守护进程会识别到这一点，随后只拉取在本地没有存储的镜像层。镜像拉取完成后，这两个镜像会共享那些公共层。&lt;/p&gt;
&lt;p&gt;现在您可以自己亲自演练一下。从刚才拉取的Ubuntu 15.04镜像开始，更新一些内容后构建一个新的镜像。使用&lt;code&gt;Dockerfile&lt;/code&gt;和&lt;code&gt;docker build&lt;/code&gt;命令可以实现这一点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在一个空目录中，创建一个空的&lt;code&gt;Dockerfile&lt;/code&gt;文件，把Ubuntu 15.04作为基础镜像&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在/tmp目录下添加一个名为“newfile”的新文件，文件的内容为“Hello world”。这一步完成后，&lt;code&gt;Dockerfile&lt;/code&gt;文件应该包含下面两行：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;FROM ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RUN echo &amp;quot;Hello world&amp;quot; &amp;gt; /tmp/newfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;保持并关闭&lt;code&gt;Dockerfile&lt;/code&gt;文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在命令行终端里，切换到&lt;code&gt;Dockerfile&lt;/code&gt;文件所在的目录，运行下面的命令：&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker build -t changed-ubuntu .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Sending build context to Docker daemon 2.048 kB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Step 1 : FROM ubuntu:15.04&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ---&amp;gt; 3f7bcee56709&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Step 2 : RUN echo &amp;quot;Hello world&amp;quot; &amp;gt; /tmp/newfile&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ---&amp;gt; Running in d14acd6fad4e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ---&amp;gt; 94e6b7d2c720&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Removing intermediate container d14acd6fad4e&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Successfully built 94e6b7d2c720&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;备注：命令末尾的句号（.）是必须的，其作用是通知&lt;code&gt;docker build&lt;/code&gt;命令使用当前的工作目录作为构建上下文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre&gt;&lt;code&gt;上面的输出信息显示构建了一个ID为`94e6b7d2c720`的新镜像。
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;运行&lt;code&gt;docker images&lt;/code&gt;命令验证这个新的&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像是否在Docker宿主机的本地存储目录中。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;    REPOSITORY       TAG      IMAGE ID       CREATED           SIZE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;changed-ubuntu   latest   03b964f68d06   33 seconds ago    131.4 MB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu           15.04    013f3d01d247   6 weeks ago       131.3 MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行&lt;code&gt;docker history&lt;/code&gt;命令查看新的&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像里添加了哪些镜像层&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	$ docker history changed-ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;IMAGE               CREATED              CREATED BY                                      SIZE        COMMENT&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94e6b7d2c720        2 minutes ago       /bin/sh -c echo &amp;quot;Hello world&amp;quot; &amp;gt; /tmp/newfile    12 B &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3f7bcee56709        6 weeks ago         /bin/sh -c #(nop) CMD [&amp;quot;/bin/bash&amp;quot;]             0 B  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;missing&amp;gt;           6 weeks ago         /bin/sh -c sed -i &amp;apos;s/^#\s*\(deb.*universe\)$/   1.879 kB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;missing&amp;gt;           6 weeks ago         /bin/sh -c echo &amp;apos;#!/bin/sh&amp;apos; &amp;gt; /usr/sbin/polic   701 B&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;missing&amp;gt;           6 weeks ago         /bin/sh -c #(nop) ADD file:8e4943cd86e9b2ca13   131.3 MB&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;code&gt;docker history&lt;/code&gt;命令显示了顶层有一个新增的&lt;code&gt;94e6b7d2c720&lt;/code&gt;的镜像层，这个层正是由您写的&lt;code&gt;Dockerfile&lt;/code&gt;文件里的&lt;code&gt;echo &amp;quot;Hello world&amp;quot; &amp;gt; /tmp/newfile&lt;/code&gt;命令创建的，其下的4个层正是组成Ubuntu 15.04镜像的层。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Docker 1.10版本引入的内容寻址存储模型下，镜像的构建历史信息不存储在每个镜像层的配置文件中，而是以文本字符串的方式存储在一个整体镜像的单个配置文件中，导致了在用&lt;code&gt;docker hisotry&lt;/code&gt;命令的输出时会显示为&lt;code&gt;missing&lt;/code&gt;的情况，这是一个正常的可以忽略的行为。&lt;br&gt;您可能会听到把类似的镜像称为扁平镜像（flat images）的说法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 注意到这个新的&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像里，并不是所有的层都有独有的拷贝。通过下方的图例，您可以看到这个新的镜像底层的4个镜像层实际上共享自&lt;code&gt;Ubuntu 15.04&lt;/code&gt;镜像。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/saving-space.jpg&quot; alt=&quot;saving-space.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt; &lt;code&gt;docker history&lt;/code&gt;命令同时也显示了每个镜像层的大小，如您看到的，&lt;code&gt;94e6b7d2c720&lt;/code&gt;这个层只占用了12个字节的磁盘空间。这意味着这个新的&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像只在Docker宿主机上额外占用了12个字节的磁盘空间，而&lt;code&gt;94e6b7d2c720&lt;/code&gt;层下方的其它所有层是在Docker宿主机上已经存在的并且可以共享给其它镜像的层。&lt;/p&gt;
&lt;p&gt; 镜像层的共享机制使Docker的镜像和容器变得十分高效。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;用复制机制使得容器更加高效&quot;&gt;&lt;a href=&quot;#用复制机制使得容器更加高效&quot; class=&quot;headerlink&quot; title=&quot;用复制机制使得容器更加高效&quot;&gt;&lt;/a&gt;用复制机制使得容器更加高效&lt;/h3&gt;&lt;p&gt;之前您了解到一个容器是一个镜像加上一个在顶层的可读写容器层，下面的图例展示了一个基于&lt;code&gt;Ubuntu 15.04&lt;/code&gt;镜像的容器的层：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/container-layers-cas.jpg&quot; alt=&quot;container-layers-cas.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;所有对容器的写入操作都存储在那个可读写容器层里，其它的层是不可更改的只读镜像层，这意味着多个容器可以安全地共享单个的底层镜像。下面的图例展示了多个容器共享单个的&lt;code&gt;Ubuntu 15.04&lt;/code&gt;镜像。每个容器都有独有的可读写层，但是它们都共享单个的&lt;code&gt;Ubuntu 15.04&lt;/code&gt;镜像：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/sharing-layers.jpg&quot; alt=&quot;sharing-layers.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;当容器里面的已有文件被更改时，Docker使用存储驱动程序执行一个写时复制操作，具体的操作取决于存储驱动程序的实现方式。对于AUFS和OverlayFS存储驱动，写时复制操作基本上如下所示：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从上之下逐层搜索要更改的文件。&lt;/li&gt;
&lt;li&gt;如果找到要更改的文件，执行一个“向上复制”（copy-up）操作，把文件拷贝到顶层的可读写层中。&lt;/li&gt;
&lt;li&gt;在可读写层中进行文件的更改。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Btrfs，ZFS和其它的存储驱动的写时复制机制是不一样的，您可以在这些存储驱动程序的文档中了解到更多的信息。&lt;/p&gt;
&lt;p&gt;写入大量数据的容器会占用更多的磁盘空间，因为大多数写操作需要在顶层的可读写层中消耗更多的空间。如果您的容器需要写入大量的数据，建议您使用数据卷（data volume）。&lt;/p&gt;
&lt;p&gt;“向上复制”操作会带来显著的性能开销。取决于使用何种存储驱动程序，这种性能开销会有所不同。然而，对于很多大文件，很多层，并且目录结构很深的情况，这种影响尤其显著。幸运的是，这个操作仅在第一次更改文件的时候发生，对同样文件的后续更改不会触发“向上复制”的操作，因为文件已经拷贝到顶层的可读写容器层中了。&lt;/p&gt;
&lt;p&gt;我们来看一下如果启动5个基于先前新建的&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像的容器会发生什么情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在Docker宿主机的命令行终端里，把下面的&lt;code&gt;docker run&lt;/code&gt;命令运行5次。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -dit changed-ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75bab0d54f3cf193cfdc3a86483466363f442fba30859f7dcd1b816b6ede82d4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -dit changed-ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9280e777d109e2eb4b13ab211553516124a3d4d4280a0edfc7abf75c59024d47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -dit changed-ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a651680bd6c2ef64902e154eeb8a064b85c9abf08ac46f922ad8dfc11bb5cd8a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -dit changed-ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8eb24b3b2d246f225b24f2fca39625aaad71689c392a7b552b78baf264647373&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ docker run -dit changed-ubuntu bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0ad25d06bdf6fca0dedc38301b2aff7478b3e1ce3d1acd676573bba57cb1cfef&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 运行完会启动5个基于&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像的容器，当容器创建时，Docker添加了一个可读写层并且分配了一个随机的UUID，这也是&lt;code&gt;docker run&lt;/code&gt;命令的返回值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;运行&lt;code&gt;docker ps&lt;/code&gt;命令验证这5个容器是否在运行。&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;	$ docker ps&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;CONTAINER ID    IMAGE             COMMAND    CREATED              STATUS              PORTS    NAMES&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0ad25d06bdf6    changed-ubuntu    &amp;quot;bash&amp;quot;     About a minute ago   Up About a minute            stoic_ptolemy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8eb24b3b2d24    changed-ubuntu    &amp;quot;bash&amp;quot;     About a minute ago   Up About a minute            pensive_bartik&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a651680bd6c2    changed-ubuntu    &amp;quot;bash&amp;quot;     2 minutes ago        Up 2 minutes                 hopeful_turing&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9280e777d109    changed-ubuntu    &amp;quot;bash&amp;quot;     2 minutes ago        Up 2 minutes                 backstabbing_mahavira&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75bab0d54f3c    changed-ubuntu    &amp;quot;bash&amp;quot;     2 minutes ago        Up 2 minutes                 boring_pasteur&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 上面的输出显示有5个基于&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像的容器在运行，每个&lt;code&gt;CONTAINER ID&lt;/code&gt;都源自于创建容器时的UUID。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;列出本地存储目录下的内容&lt;/p&gt;
 &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo ls /var/lib/docker/containers&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;0ad25d06bdf6fca0dedc38301b2aff7478b3e1ce3d1acd676573bba57cb1cfef&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9280e777d109e2eb4b13ab211553516124a3d4d4280a0edfc7abf75c59024d47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75bab0d54f3cf193cfdc3a86483466363f442fba30859f7dcd1b816b6ede82d4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a651680bd6c2ef64902e154eeb8a064b85c9abf08ac46f922ad8dfc11bb5cd8a&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8eb24b3b2d246f225b24f2fca39625aaad71689c392a7b552b78baf264647373&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Docker的写时复制机制不仅减少了容器的磁盘占用，同时也缩减了启动容器所需的时间。在运行开始时，Docker只需要为启动的容器创建一个薄薄的的可读写层，下面的图例展示了5个基于&lt;code&gt;changed-ubuntu&lt;/code&gt;镜像的容器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/shared-uuid.jpg&quot; alt=&quot;shared-uuid.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;假如Docker需要在每次启动容器的时候都要拷贝底层镜像的所有层，容器的启动时间和磁盘占用会显著增加。&lt;/p&gt;
&lt;h2 id=&quot;数据卷和存储驱动&quot;&gt;&lt;a href=&quot;#数据卷和存储驱动&quot; class=&quot;headerlink&quot; title=&quot;数据卷和存储驱动&quot;&gt;&lt;/a&gt;数据卷和存储驱动&lt;/h2&gt;&lt;p&gt;当一个容器被删除时，任何对于容器的更改，不存储在一个数据卷里的数据是随着容器一起删除的。&lt;/p&gt;
&lt;p&gt;一个数据卷是一个直接挂载到容器内的Docker宿主机上的目录或者文件。数据卷不受存储驱动程序控制。对数据卷的读写操作会绕过存储驱动程序，操作会像在本地主机上快速。您可以在容器里挂载任意数量的数据卷，多个容器也可以共享一个或多个数据卷。&lt;/p&gt;
&lt;p&gt;下面的图例展示了单个Docker宿主机运行了两个容器，每个容器在Docker宿主机的本地存储区域里占用了独有的空间（&lt;code&gt;/var/lib/docker/...&lt;/code&gt;），另外在Docker宿主机的&lt;code&gt;/data&lt;/code&gt;目录下还有单个共享的数据卷，这个目录被同时挂载到了两个容器里。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/userguide/storagedriver/images/shared-volume.jpg&quot; alt=&quot;shared-volume.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;数据卷驻留在Docker宿主机的本地存储区域之外，进一步剥离开存储驱动程序对其的控制。当一个容器被删除时，任何存储在数据卷里的数据会保留在Docker宿主机上。&lt;/p&gt;
&lt;p&gt;更多有关数据卷的详细信息，请参考&lt;a href=&quot;https://docs.docker.com/userguide/dockervolumes/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;管理容器内的数据&lt;/a&gt;。&lt;/p&gt;
&lt;h2 id=&quot;相关信息&quot;&gt;&lt;a href=&quot;#相关信息&quot; class=&quot;headerlink&quot; title=&quot;相关信息&quot;&gt;&lt;/a&gt;相关信息&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/selectadriver/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;存储驱动的选取&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/aufs-driver/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;AUFS存储驱动实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/btrfs-driver/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Btrfs存储驱动实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Device Mapper存储驱动实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0  &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/imagesandcontainers/&quot; target
    
    </summary>
    
      <category term="翻译" scheme="http://buildship.run/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Docker" scheme="http://buildship.run/tags/Docker/"/>
    
      <category term="Docker基础" scheme="http://buildship.run/tags/Docker%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Docker简介 [译文]</title>
    <link href="http://buildship.run/2016/docker-overview/"/>
    <id>http://buildship.run/2016/docker-overview/</id>
    <published>2016-08-30T05:46:25.000Z</published>
    <updated>2016-09-29T03:02:15.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0&lt;br&gt;更新日期: 2016-09-27  &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/understanding-docker/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://docs.docker.com/engine/understanding-docker/&lt;/a&gt;&lt;br&gt;由于能力所限，翻译难免有不到位的地方，另外官方文档也时有更新，如有不一致的地方，请以原文为准！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Docker简介&quot;&gt;&lt;a href=&quot;#Docker简介&quot; class=&quot;headerlink&quot; title=&quot;Docker简介&quot;&gt;&lt;/a&gt;Docker简介&lt;/h2&gt;&lt;p&gt;Docker是一个用于开发、分发和运行应用程序的开放平台。Docker使您能够把应用程序从基础架构中分离开来。通过Docker，您可以像管理应用程序一样管理您的基础架构。通过利用Docker快速分发、 测试和部署代码的机制，可以显著缩短从编写代码到在生产环境运行代码的周期。&lt;/p&gt;
&lt;h2 id=&quot;什么是Docker平台？&quot;&gt;&lt;a href=&quot;#什么是Docker平台？&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker平台？&quot;&gt;&lt;/a&gt;什么是Docker平台？&lt;/h2&gt;&lt;p&gt;Docker提供了打包和在一个称为容器（Container）的松散隔离环境中运行应用程序的能力。这种隔离性和安全性使您能够在一个主机上同时运行许多容器。容器具有轻量级的特性，其运行时不需要hypervisor的额外损耗，相比较虚拟机而言，在同样的硬件条件下可以运行更多的容器。&lt;/p&gt;
&lt;p&gt;容器提供了相关的工具和平台来管理容器的生命周期：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;把您的应用程序以及其支持组件放入Docker容器&lt;/li&gt;
&lt;li&gt;分发容器给您的团队以用于进一步的开发和测试&lt;/li&gt;
&lt;li&gt;部署应用程序到生产环境，无论其在本地数据中心还是在云端&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;什么是Docker引擎？&quot;&gt;&lt;a href=&quot;#什么是Docker引擎？&quot; class=&quot;headerlink&quot; title=&quot;什么是Docker引擎？&quot;&gt;&lt;/a&gt;什么是Docker引擎？&lt;/h2&gt;&lt;p&gt;Docker引擎是一个C/S架构的应用程序，包含以下主要组件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器 - 运行着一种被称为守护进程的长期运行程序&lt;/li&gt;
&lt;li&gt;REST应用程序接口 - 定义了可以与守护进程进行交互的接口&lt;/li&gt;
&lt;li&gt;命令行接口（CLI）客户端&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/article-img/engine-components-flow.png&quot; alt=&quot;engine-components-flow.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;命令行接口使用Docker的REST应用程序接口与Docker守护进程进行交互，许多其它Docker应用程序利用底层REST应用程序接口和命令行接口。&lt;/p&gt;
&lt;p&gt;Docker守护进程创建和管理Docker对象，包括镜像、容器、网络以及数据卷等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker受Apache 2.0的开源许可保护&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;能用Docker做什么？&quot;&gt;&lt;a href=&quot;#能用Docker做什么？&quot; class=&quot;headerlink&quot; title=&quot;能用Docker做什么？&quot;&gt;&lt;/a&gt;能用Docker做什么？&lt;/h2&gt;&lt;h3 id=&quot;持续快速地交付您的应用程序&quot;&gt;&lt;a href=&quot;#持续快速地交付您的应用程序&quot; class=&quot;headerlink&quot; title=&quot;持续快速地交付您的应用程序&quot;&gt;&lt;/a&gt;&lt;em&gt;持续快速地交付您的应用程序&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;让开发人员在那些利用本地容器来承载应用程序和服务的标准化环境中工作，可以简化开发的生命周期。您也可以将Docker集成到您的持续集成（CI）和持续部署（CD）的工作流程中。&lt;/p&gt;
&lt;p&gt;考虑这样一个示例场景，开发人员可以在本地编写代码，并可以通过Docker容器将他们的工作成果共享给他们的同事。他们可以通过Docker把他们的应用程序部署到一个测试环境并进行手动和自动化测试，当开发人员发现问题时，可以在开发环境修复问题并重新部署到测试环境进行测试，测试完成后，可以把修补程序提供给客户，这个过程和把更新的镜像部署到生产环境一样简便。&lt;/p&gt;
&lt;h3 id=&quot;响应式部署和扩展&quot;&gt;&lt;a href=&quot;#响应式部署和扩展&quot; class=&quot;headerlink&quot; title=&quot;响应式部署和扩展&quot;&gt;&lt;/a&gt;&lt;em&gt;响应式部署和扩展&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;Docker基于容器的平台使应用程序具有高度可移植性，Docker容器可以运行在开发人员的本地机器上，或者在数据中心、云端或者混合架构环境的物理机与虚拟机上。&lt;/p&gt;
&lt;p&gt;Docker的可移植性和轻量特性也使应用程序的动态管理更加容易，可以按业务需要对应用程序和服务进行近乎实时的扩展或缩减。&lt;/p&gt;
&lt;h3 id=&quot;承载更多负荷&quot;&gt;&lt;a href=&quot;#承载更多负荷&quot; class=&quot;headerlink&quot; title=&quot;承载更多负荷&quot;&gt;&lt;/a&gt;&lt;em&gt;承载更多负荷&lt;/em&gt;&lt;/h3&gt;&lt;p&gt;Docker很轻量很快，它提供了一个切实可行的并且具有成本效益的用于替代基于hypervisor虚拟机的方案，使您获得更多的计算能力。这对于高密集的环境尤其有用（比如构建私有云或者PaaS平台），但同时对于中小型的部署也很有用，能最大化硬件的资源利用。&lt;/p&gt;
&lt;h2 id=&quot;Docker的架构如何？&quot;&gt;&lt;a href=&quot;#Docker的架构如何？&quot; class=&quot;headerlink&quot; title=&quot;Docker的架构如何？&quot;&gt;&lt;/a&gt;Docker的架构如何？&lt;/h2&gt;&lt;p&gt;Docker用的是一个C/S的架构，Docker客户端与Docker守护进程交互，Docker守护进程负责容器的构建、运行与分发等繁重工作。Docker客户端与守护进程可以运行在同一个系统上，或者Docker客户端也可以连接远程的Docker守护进程。Docker客户端与守护进程通过Sockets或者REST应用程序接口进行交互。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.docker.com/engine/article-img/architecture.svg&quot; alt=&quot;architecture.svg&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Docker守护进程&quot;&gt;&lt;a href=&quot;#Docker守护进程&quot; class=&quot;headerlink&quot; title=&quot;Docker守护进程&quot;&gt;&lt;/a&gt;Docker守护进程&lt;/h3&gt;&lt;p&gt;如上图所示，Docker守护进程运行在宿主机上，用户通过Docker客户端与Docker守护进程进行交互。&lt;/p&gt;
&lt;h3 id=&quot;Docker客户端&quot;&gt;&lt;a href=&quot;#Docker客户端&quot; class=&quot;headerlink&quot; title=&quot;Docker客户端&quot;&gt;&lt;/a&gt;Docker客户端&lt;/h3&gt;&lt;p&gt;Docker客户端是&lt;code&gt;docker&lt;/code&gt;二进制命令，是Docker的主要交互接口，其接收来自用户的命令并继而与Docker守护进程进行交互。一个客户端甚至可以与多个不相干的守护进程进行交互。&lt;/p&gt;
&lt;h3 id=&quot;深入Docker&quot;&gt;&lt;a href=&quot;#深入Docker&quot; class=&quot;headerlink&quot; title=&quot;深入Docker&quot;&gt;&lt;/a&gt;深入Docker&lt;/h3&gt;&lt;p&gt;为了了解Docker的内部，您需要了解下&lt;em&gt;Docker镜像&lt;/em&gt;、&lt;em&gt;Docker镜像库&lt;/em&gt; 和 &lt;em&gt;Docker容器&lt;/em&gt;。&lt;/p&gt;
&lt;h4 id=&quot;Docker镜像&quot;&gt;&lt;a href=&quot;#Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像&quot;&gt;&lt;/a&gt;Docker镜像&lt;/h4&gt;&lt;p&gt;Docker镜像是一个包含着用于构建Docker容器所需指令的只读模板。举例来说，一个镜像可以包含一个装有Apache和web应用程序的Ubuntu操作系统。您可以亲自从头开始创建和更新自己的镜像，或者您也可以下载其他人构建好的已有镜像。一个镜像可以基于其它镜像构建或扩展而来。Docker镜像定义在一个称为&lt;code&gt;Dockerfile&lt;/code&gt;的文本文件里，&lt;code&gt;Dockerfile&lt;/code&gt;的语法简单明了。有关镜像的详细信息，请参见&lt;a href=&quot;#Docker镜像是如何工作的？&quot;&gt;Docker镜像是如何工作的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker镜像是Docker的&lt;strong&gt;构建&lt;/strong&gt;组件。&lt;/p&gt;
&lt;h4 id=&quot;Docker镜像库&quot;&gt;&lt;a href=&quot;#Docker镜像库&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像库&quot;&gt;&lt;/a&gt;Docker镜像库&lt;/h4&gt;&lt;p&gt;Docker镜像库存储Docker镜像，镜像库有公开库和私有库，可以和Docker守护进程或者Docker客户端在同一台服务器上，也可以在一个完全独立的服务器上。有关镜像库的详细信息，请参见&lt;a href=&quot;#Docker镜像库是如何工作的？&quot;&gt;Docker镜像库是如何工作的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker镜像库是Docker的&lt;strong&gt;分发&lt;/strong&gt;组件&lt;/p&gt;
&lt;h4 id=&quot;Docker容器&quot;&gt;&lt;a href=&quot;#Docker容器&quot; class=&quot;headerlink&quot; title=&quot;Docker容器&quot;&gt;&lt;/a&gt;Docker容器&lt;/h4&gt;&lt;p&gt;Docker容器是Docker镜像的运行实例。您可以通过Docker应用程序接口或者命令行接口来运行、启动、停止、移动或者删除容器。当您运行容器时，您可以提供诸如网络配置和环境变量等配置信息。每个容器都是一个安全隔离的应用平台，但可以赋予其它宿主机及容器上资源的访问权限，包括持久化存储或数据库。有关容器的详细信息，请参见&lt;a href=&quot;#容器是如何工作的？&quot;&gt;容器是如何工作的？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Docker容器是Docker的&lt;strong&gt;运行&lt;/strong&gt;组件。&lt;/p&gt;
&lt;h3 id=&quot;Docker服务&quot;&gt;&lt;a href=&quot;#Docker服务&quot; class=&quot;headerlink&quot; title=&quot;Docker服务&quot;&gt;&lt;/a&gt;Docker服务&lt;/h3&gt;&lt;p&gt;Docker服务使一群Docker节点可以一起工作，运行着一定数量的任务实例，任务本身是一个Docker镜像。您可以指定需要并行运行的任务数量，&lt;code&gt;swarm&lt;/code&gt;管理器会确保负载均衡地分布到不同的Docker节点上。对于服务调用方来说，Docker服务可以被视为一个单一的应用程序。Docker引擎在1.12或更高版本中支持&lt;code&gt;swarm&lt;/code&gt;模式。&lt;/p&gt;
&lt;p&gt;Docker服务是Docker的&lt;strong&gt;扩展&lt;/strong&gt;组件。&lt;/p&gt;
&lt;h3 id=&quot;Docker镜像是如何工作的？&quot;&gt;&lt;a href=&quot;#Docker镜像是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像是如何工作的？&quot;&gt;&lt;/a&gt;Docker镜像是如何工作的？&lt;/h3&gt;&lt;p&gt;Docker镜像是一个只读模板，并由此启动Docker容器。每个Docker镜像由一系列的镜像层组成，Docker使用&lt;a href=&quot;http://en.wikipedia.org/wiki/UnionFS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;联合文件系统&lt;/a&gt;把这些镜像层组成一个Docker镜像。联合文件系统可以使来自不同文件系统的文件或目录（也称为分支）进行透明的堆叠，进而形成一个单一连贯的文件系统。&lt;/p&gt;
&lt;p&gt;Docker能如此轻量的其中一个原因是使用了这些镜像层。当您更改一个Docker镜像时（比如更新应用程序到新版本），会创建一个新的镜像层来代替被更新的镜像层里的内容，其它镜像层不会受到影响。在发布更新的时候，您只需要移动更新的镜像层。镜像分层机制加速了Docker镜像的分发速度，Docker会在运行时判断哪些层需要被更新。&lt;/p&gt;
&lt;p&gt;Docker镜像是在&lt;code&gt;Dockerfile&lt;/code&gt;里定义的。每个镜像都由一个基础镜像构建而来，比如一个Ubuntu基础镜像或者一个Fedora基础镜像。您也可以使用您自己构建的镜像作为新镜像的基础镜像，比如您可以基于一个Apache的基础镜像构建所有的web应用程序镜像。基础镜像是在&lt;code&gt;Dockerfile&lt;/code&gt;里用&lt;code&gt;FROM&lt;/code&gt;指令来指定的。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;是一个公开镜像库，里面用来存储Docker镜像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Docker镜像从一个基础镜像构建而来，通过&lt;code&gt;Dockerfile&lt;/code&gt;里的一种称为指令（instructions）的一系列步骤来指定。每个指令会在镜像中产生一个新的镜像层。指令包含的动作诸如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;指定基础镜像 [&lt;code&gt;FROM&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;指定镜像维护人员信息 [&lt;code&gt;MAINTAINER&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;运行一条命令 [&lt;code&gt;RUN&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;添加一个文件或目录 [&lt;code&gt;ADD&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;创建一个环境变量 [&lt;code&gt;ENV&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;制定在容器启动时运行什么进程 [&lt;code&gt;CMD&lt;/code&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当您请求构建一个镜像时，Docker会读取&lt;code&gt;Dockerfile&lt;/code&gt;并执行其中的指令，最终构建成一个新镜像。&lt;/p&gt;
&lt;h3 id=&quot;Docker镜像库是如何工作的？&quot;&gt;&lt;a href=&quot;#Docker镜像库是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;Docker镜像库是如何工作的？&quot;&gt;&lt;/a&gt;Docker镜像库是如何工作的？&lt;/h3&gt;&lt;p&gt;Docker镜像库用于存储镜像文件。一旦您构建了一个Docker镜像，您可以推送（push）这个镜像到一个公开镜像库（如&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;），或者您自己在防火墙后面的私有镜像库。您也可以搜索镜像库中的已有镜像，然后拉取（pull）到本地宿主机上。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;是一个公开镜像库，提供了大量的镜像可供使用，当然您也可以贡献自己的镜像。更多信息，请参见&lt;a href=&quot;https://docs.docker.com/registry/overview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker镜像库&lt;/a&gt;和&lt;a href=&quot;https://docs.docker.com/docker-trusted-registry/overview/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker授信镜像库&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;您可以在&lt;a href=&quot;http://store.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker商店&lt;/a&gt;购买和售卖Docker镜像。您可以从软件供应商那儿购买一个包含着应用程序或服务的镜像，然后把这个镜像部署到您的测试，模拟（staging）和生产环境，并且可以通过拉取新版本镜像并重新部署容器的方式进行应用的升级。Docker商店目前在内测过程中。&lt;/p&gt;
&lt;h3 id=&quot;容器是如何工作的？&quot;&gt;&lt;a href=&quot;#容器是如何工作的？&quot; class=&quot;headerlink&quot; title=&quot;容器是如何工作的？&quot;&gt;&lt;/a&gt;容器是如何工作的？&lt;/h3&gt;&lt;p&gt;容器调用宿主机的Linux内核，并结合在镜像构建阶段用户添加的文件，以及在容器启动阶段指定的元数据（metadata）。每个容器都是由一个镜像生成的，镜像决定了容器应该包含什么内容、在启动时应该运行什么进程，以及各种不同的配置信息。Docker镜像本身是只读的，在容器启动时，Docker通过联合文件系统在镜像的最上层增加一个可读写的层。&lt;/p&gt;
&lt;h3 id=&quot;当运行容器时发生了什么？&quot;&gt;&lt;a href=&quot;#当运行容器时发生了什么？&quot; class=&quot;headerlink&quot; title=&quot;当运行容器时发生了什么？&quot;&gt;&lt;/a&gt;当运行容器时发生了什么？&lt;/h3&gt;&lt;p&gt;通过使用&lt;code&gt;docker run&lt;/code&gt;命令行接口或其它类似接口，Docker客户端会通知Docker守护进程运行一个容器。下面的示例通知Docker守护进程使用&lt;code&gt;ubuntu&lt;/code&gt;镜像启动一个在前端以交互式模式[&lt;code&gt;-i&lt;/code&gt;]运行的容器，并且同时运行&lt;code&gt;/bin/bash&lt;/code&gt;命令。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ docker run -i -t ubuntu /bin/bash&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;当您运行这条命令的时候，Docker引擎进行了下面的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拉取Ubuntu镜像：Docker引擎在本地宿主机上检查Ubuntu镜像是否存在。如果镜像存在，Docker引擎将用这个镜像创建新的容器。如果镜像在本地宿主机上不存在，Docker引擎会从&lt;a href=&quot;https://hub.docker.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker Hub&lt;/a&gt;上拉取该镜像。&lt;/li&gt;
&lt;li&gt;创建新的容器。&lt;/li&gt;
&lt;li&gt;分配文件系统并挂载可读写层：在文件系统中创建容器并且在镜像之上增加一个可读写层。&lt;/li&gt;
&lt;li&gt;分配网络接口：创建网络接口，用于容器与宿主机的通信。&lt;/li&gt;
&lt;li&gt;设置网络IP：从资源池中寻找并配置可用IP。&lt;/li&gt;
&lt;li&gt;执行指定的进程。&lt;/li&gt;
&lt;li&gt;捕获并提供应用程序输出：由于指定为交互式模式，还会连接并记录标准输入、标准输出和标准错误，以便您检查应用程序的运行状况。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;至此您拥有了一个运行中的容器！现在您可以管理您的容器，与您的应用程序交互，当完成后，您也可以停止并删除掉容器。&lt;/p&gt;
&lt;h2 id=&quot;底层的技术&quot;&gt;&lt;a href=&quot;#底层的技术&quot; class=&quot;headerlink&quot; title=&quot;底层的技术&quot;&gt;&lt;/a&gt;底层的技术&lt;/h2&gt;&lt;p&gt;Docker是用go语言编写的，通过调用内核的一些特性来实现我们所看到的这些功能。&lt;/p&gt;
&lt;h3 id=&quot;命名空间（Namespaces）&quot;&gt;&lt;a href=&quot;#命名空间（Namespaces）&quot; class=&quot;headerlink&quot; title=&quot;命名空间（Namespaces）&quot;&gt;&lt;/a&gt;命名空间（Namespaces）&lt;/h3&gt;&lt;p&gt;Docker利用了命名空间技术来提供容器的这种隔离环境。当您运行一个容器时，Docker会为这个容器创建一系列的命名空间。&lt;/p&gt;
&lt;p&gt;这些命名空间提供了一层隔离保障，容器里的各个部分都运行在单独的命名空间里，资源的访问权限仅限在这个单独的命名空间里。&lt;/p&gt;
&lt;p&gt;Docker引擎使用到的Linux命名空间有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pid&lt;/code&gt;命名空间：进程隔离 (PID: Process ID)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;net&lt;/code&gt;命名空间：管理网络接口 (NET: Networking)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ipc&lt;/code&gt;命名空间：管理进程间通信的访问 (IPC: InterProcess Communication)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mnt&lt;/code&gt;命名空间：管理挂载点 (MNT: Mount)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;uts&lt;/code&gt;命名空间：隔离内核和版本标识 (UTS: Unix Timesharing System)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;控制组（Control-Groups）&quot;&gt;&lt;a href=&quot;#控制组（Control-Groups）&quot; class=&quot;headerlink&quot; title=&quot;控制组（Control Groups）&quot;&gt;&lt;/a&gt;控制组（Control Groups）&lt;/h3&gt;&lt;p&gt;Linux上的Docker引擎也使用了叫做&lt;code&gt;cgroups&lt;/code&gt;或控制组的技术，&lt;code&gt;cgroups&lt;/code&gt;用以限制应用程序的资源占用。通过控制组，使Docker引擎把可用的硬件资源分配给容器，并在必要的时候进行资源配额限制。举例来说，您可以给特定的容器分配一定量的内存。&lt;/p&gt;
&lt;h3 id=&quot;联合文件系统（Union-file-systems）&quot;&gt;&lt;a href=&quot;#联合文件系统（Union-file-systems）&quot; class=&quot;headerlink&quot; title=&quot;联合文件系统（Union file systems）&quot;&gt;&lt;/a&gt;联合文件系统（Union file systems）&lt;/h3&gt;&lt;p&gt;联合文件系统（或UnionFS）是通过创建层的方式来工作的文件系统，因此联合文件系统变得很轻量很快速。Docker引擎使用联合文件系统来构建容器。Docker引擎可以使用多种类型联合文件系统，如AUFS，btrfs，vfs以及DeviceMapper。&lt;/p&gt;
&lt;h3 id=&quot;容器格式&quot;&gt;&lt;a href=&quot;#容器格式&quot; class=&quot;headerlink&quot; title=&quot;容器格式&quot;&gt;&lt;/a&gt;容器格式&lt;/h3&gt;&lt;p&gt;Docker引擎把命名空间、控制组以及联合文件系统组合封装成一个容器格式。默认的容器格式称为&lt;code&gt;libcontainer&lt;/code&gt;。未来，Docker或许会通过集成诸如BSD Jails或者Solaris Zones来支持其它容器格式.&lt;/p&gt;
&lt;h2 id=&quot;下一步&quot;&gt;&lt;a href=&quot;#下一步&quot; class=&quot;headerlink&quot; title=&quot;下一步&quot;&gt;&lt;/a&gt;下一步&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;阅读更多有关&lt;a href=&quot;https://docs.docker.com/engine/installation/#installation&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;安装Docker引擎&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;跟随&lt;a href=&quot;https://docs.docker.com/engine/getstarted/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker入门&lt;/a&gt;教程进行动手实验。&lt;/li&gt;
&lt;li&gt;查看&lt;a href=&quot;https://docs.docker.com/engine/userguide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Docker引擎用户手册&lt;/a&gt;里的示例并深入了解相关主题内容。&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Docker版本: v1.12.0&lt;br&gt;更新日期: 2016-09-27  &lt;/p&gt;
&lt;p&gt;翻译自: &lt;a href=&quot;https://docs.docker.com/engine/understanding-docker/&quot; target=&quot;_
    
    </summary>
    
      <category term="翻译" scheme="http://buildship.run/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="Docker" scheme="http://buildship.run/tags/Docker/"/>
    
      <category term="Docker基础" scheme="http://buildship.run/tags/Docker%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
